<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Chase the Devil</title>
    <link>https://chasethedevil.github.io/categories/programming/</link>
    <description>Recent content in Programming on Chase the Devil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2006-2018 Fabien Le Floc&#39;h. This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <lastBuildDate>Sun, 07 Oct 2018 20:56:42 +0100</lastBuildDate>
    
	<atom:link href="https://chasethedevil.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fixing NaNs in Quadprog</title>
      <link>https://chasethedevil.github.io/post/quadprog-nans/</link>
      <pubDate>Sun, 07 Oct 2018 20:56:42 +0100</pubDate>
      
      <guid>https://chasethedevil.github.io/post/quadprog-nans/</guid>
      <description>Out of curiosity, I tried quadprog as open-source quadratic programming convex optimizer, as it is looks fast, and the code stays relatively simple. I however stumbled on cases where the algorithm would return NaNs even though my inputs seemed straighforward. Other libraries such as CVXOPT did not have any issues with those inputs.
Searching on the web, I found that I was not the only one to stumble on this kind of issue with quadprog.</description>
    </item>
    
    <item>
      <title>Senior Developers Don&#39;t Know OO Anymore</title>
      <link>https://chasethedevil.github.io/post/senior-developers-dont-know-oo-anymore/</link>
      <pubDate>Thu, 08 Mar 2018 20:56:42 +0100</pubDate>
      
      <guid>https://chasethedevil.github.io/post/senior-developers-dont-know-oo-anymore/</guid>
      <description>It has been a while since the good old object-oriented (OO) programming is not trendy anymore. Functional programming or more dynamic programming (Python-based) have been the trend, with an excursion in template based programming for C++ guys. Those are not strict categories: Python can be used in a very OO way, but it&amp;rsquo;s not how it is marketed or considered by the community.
Recently, I have seen some of the ugliest refactoring in my life as a programmer, done by someone with at least 10 years of experience programming in Java.</description>
    </item>
    
    <item>
      <title>SVN is dead</title>
      <link>https://chasethedevil.github.io/post/svn_is_dead/</link>
      <pubDate>Tue, 26 Sep 2017 23:56:42 +0100</pubDate>
      
      <guid>https://chasethedevil.github.io/post/svn_is_dead/</guid>
      <description>A few years ago, when Git was rising fast and SVN was already not hype anymore, a friend thought that SVN was for many organizations better suited than Git, with the following classical arguments, which were sound at the time:
 Who needs decentralization for a small team or a small company working together? â€ŽSVN is proven, works well and is simple to use and put in place.  Each argument is in reality not so strong.</description>
    </item>
    
    <item>
      <title>The Neural Network in Your CPU</title>
      <link>https://chasethedevil.github.io/post/the_neural_network_in_your_cpu/</link>
      <pubDate>Sun, 06 Aug 2017 23:56:42 +0100</pubDate>
      
      <guid>https://chasethedevil.github.io/post/the_neural_network_in_your_cpu/</guid>
      <description>Machine learning and artificial intelligence are the current hype (again). In their new Ryzen processors, AMD advertises the Neural Net Prediction. It turns out this is was already used in their older (2012) Piledriver architecture used for example in the AMD A10-4600M. It is also present in recent Samsung processors such as the one powering the Galaxy S7. What is it really?
The basic idea can be traced to a paper from Daniel Jimenez and Calvin Lin &amp;ldquo;Dynamic Branch Prediction with Perceptrons&amp;rdquo;, more precisely described in the subsequent paper &amp;ldquo;Neural methods for dynamic branch prediction&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>