<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on Chase the Devil</title>
    <link>http://chasethedevil.github.io/tags/book/</link>
    <description>Recent content in Book on Chase the Devil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Jun 2008 17:06:00 +0000</lastBuildDate>
    <atom:link href="http://chasethedevil.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Option, Futures and Other Derivatives Book Review</title>
      <link>http://chasethedevil.github.io/post/option-futures-and-other-derivatives-book-review/</link>
      <pubDate>Mon, 16 Jun 2008 17:06:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/option-futures-and-other-derivatives-book-review/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-style: italic;&#34;&gt;Option, Futures and Other Derivatives&lt;/span&gt; is by far the most popular book in finance. You will find it in every finance company, on many desks.&lt;br /&gt;&lt;br /&gt;It is a very good introduction for people not familiar with standard financial products. This kind of book is unavoidable to understand the basis. It goes also beyond with the chapters on pricing and hedging. These 2 chapters make one understand many other book. If one understands the Black and Scholze formula, one can easily approach many other pricing formula, as in a way, there are all similar in their approach.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Structured Equity Derivatives Book Review</title>
      <link>http://chasethedevil.github.io/post/structured-equity-derivatives-book-review/</link>
      <pubDate>Mon, 16 Jun 2008 16:55:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/structured-equity-derivatives-book-review/</guid>
      <description>&lt;p&gt;If one has to learn about equity derivatives, beside the classic &lt;a href=&#34;http://chasethedevil.blogspot.com/2008/06/option-futures-and-other-derivatives.html&#34;&gt;&lt;span style=&#34;font-style: italic;&#34;&gt;Option, Futures and Other Derivatives&lt;/span&gt;&lt;/a&gt; from Hull, &lt;span style=&#34;font-style: italic;&#34;&gt;Structured Equity Derivatives&lt;/span&gt; by Harry M Kat is a must read.&lt;br /&gt;&lt;br /&gt;His ideas are presented in a software developer friendly way, as his goal is to show how different equity derivatives products are behind the scenes, very similar.&lt;br /&gt;&lt;br /&gt;I enjoyed the variety of exotic products presented and the very detailed way in which they are explained.&lt;br /&gt;&lt;br /&gt;The book is filled up with graphs, which is a good thing. While browsing the book for the first time, I did not really grasp those graphs well. But after having read it, they do make sense and help visualize what&amp;rsquo;s happening. With those graphs, volatility and other parameters don&amp;rsquo;t look only like abstract variables in a formula.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Concurrency In Practice Book Review</title>
      <link>http://chasethedevil.github.io/post/java-concurrency-in-practice-book-review/</link>
      <pubDate>Wed, 14 Feb 2007 16:33:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/java-concurrency-in-practice-book-review/</guid>
      <description>&lt;p&gt;My reference book on Java concurrency is Doug Lea&amp;#39;s &lt;span style=&#34;font-style: italic;&#34;&gt;&lt;span class=&#34;srTitle&#34;&gt;Concurrent Programming in Java: Design Principles and Patterns&lt;/span&gt;&lt;/span&gt;. He is one of the authors of this new book,  &lt;span style=&#34;font-style: italic;&#34;&gt;Java Concurrency In Practice&lt;/span&gt;. There is also Joshua Bloch, author of &lt;span style=&#34;font-style: italic;&#34;&gt;Effective Java&lt;/span&gt;, that many people love (but I am less a fan of it, even if I would recommend it to Java newbies), and author of  &lt;span style=&#34;font-style: italic;&#34;&gt;Java Puzzlers&lt;/span&gt;, that I found more fun.&lt;br&gt;&lt;br&gt;With such authors, I had relatively high expectations. I was surprised that there is not much material in common between Doug Lea&amp;#39;s book and this one, which is a good thing. It&amp;#39;s a different presentation, that focuses on different problems.  &lt;br&gt;&lt;br&gt;There is some very interesting material, I especially enjoyed chapter 16 on the Java Memory Model. There are not many&amp;nbsp; books with information on it. I did not know that initializing a final member in the constructor was providing thread safety for the accessor method of the corresponding field if there is no other modifying method, no synchronization needed. And not having the member declared as final was breaking the safety. &lt;br&gt;&lt;br&gt;I also had not heard of &lt;a href=&#34;http://en.wikipedia.org/wiki/Amdahl%27s_Law&#34;&gt;Amdahl&amp;#39;s law&lt;/a&gt;  before. It seems quite intuitive, but then the example in the book about processing parallel tasks using a synchronized LinkedList (improvement up to 3 threads, no more later due to time spent on synchronization) shows that the reality is not that intuitive. &lt;br&gt;&lt;br&gt;I enjoyed how the book is written, and how information is presented. There is for example their concept of publication and escape (in chapter 3) which tells you important things, like not starting a Thread in a constructor (and if you still want to do it they present a nice way to do it). &lt;br&gt;&lt;br&gt;I think this book is a simpler read that Doug Lea original book, and probably a better introduction (that still goes very deep) to Java concurrency programming.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Good Software Books - 2006 version</title>
      <link>http://chasethedevil.github.io/post/good-software-books---2006-version/</link>
      <pubDate>Mon, 11 Sep 2006 14:27:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/good-software-books---2006-version/</guid>
      <description>&lt;p&gt;Here is an update of the most interesting software books I found interesting. I already made &lt;a  href=&#34;http://chasethedevil.blogspot.com/2005/11/good-software-books.html&#34;&gt;such a list in 2005&lt;/a&gt;:&lt;br&gt; &lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;i&gt;Object Oriented Software Construction, 2nd Ed&lt;/i&gt;, by Bertrand Meyer. This made me understand why OOP is important, what is important in OOP and why it is still relevant. It contains lots of important guidelines you can apply to better design programs. One famous quote is &amp;ldquo;&lt;b&gt;Real systems have no top&lt;/b&gt;&amp;rdquo;. &lt;i&gt;Code Complete&lt;/i&gt; (Microsoft Press) covers some of the same ideas as Meyer&amp;rsquo;s book, and some more pragmatic issues that arise in software projects (&amp;rdquo;&lt;b&gt;measure twice, cut once&lt;/b&gt;&amp;rdquo;). I also liked the chapter on &amp;ldquo;table driven design&amp;rdquo;.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Concurrent Programming in Java, Second Edition&lt;/i&gt;, by Doug&amp;nbsp;Lea: there is all you need to know about programming in a multithreaded environment in it. The chapter on synchronization should be a must read for every Java developer.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Design Patterns&lt;/i&gt; by the GoF: simply the best presentation of most common design patterns. I have a glance on it once in a while.&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Artificial Intelligence through Prolog&lt;/i&gt;, by Neil C. Rowe (Prentice-Hall): if you don&amp;rsquo;t remember much about Prolog, it&amp;rsquo;s a good book. It details how Prolog interpreters work.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;File Systems Forensic Analysis, &lt;/i&gt;by Brian Carrier (Addison Wesley): everything you need to know about disks and file systems, every trick to recover lost data. To go more in depth into file systems theory, you can read the free &lt;i&gt;&lt;a  href=&#34;http://www.nobius.org/%7Edbg/&#34;&gt;Practical File System Design with the Be File System&lt;/a&gt; &lt;/i&gt;from D. Giampaolo, the creator of BeFS.&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Mind Hacks &lt;/i&gt;(O&amp;rsquo;Reilly): you probably already bought that one. Not about software, but excellent.&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Practical Issues in Database Management&lt;/i&gt; by Fabian Pascal (Addison Wesley): short but concise book on relational database theory. F Pascal is of CJ Date school of thoughts, &amp;ldquo;null are evil&amp;rdquo;. You don&amp;rsquo;t need to read it if you have read any other similar book (by CJ Date for example).&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Inside The Java Virtual Machine,&lt;/i&gt; by Bill Venners (McGraw-Hill): there are other books on the same subject. While this book has some bad reviews, I found it an easy read, and it explain well enough for me all the inner details of Java. I found &amp;ldquo;Programming for the Java Virtual Machine&amp;rdquo; not better, and with some bad example of a Prolog language for the JVM (1 full chapter for this to present a way too simple thing to be of any use).&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Programming Jabber&lt;/i&gt;, by O&amp;rsquo;Reilly: I have read it 2 years ago, I enjoyed how they made you go through building a Jabber server.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Lucene In Action&lt;/i&gt;: the only book about Lucene, some of the info is useful to understand how it is designed.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Hibernate In Action:&lt;/i&gt; if you have to use hibernate, this is the book to read. It presents different ways of using it.&lt;/li&gt;   &lt;li&gt;some Javascript+DHTML(+CSS) book: useful if you have none. They often have good tricks to solve the usual problems. In the AJAX days, it becomes useful again. I find O&amp;rsquo;Reilly&amp;rsquo;s &amp;ldquo;&lt;i&gt;Javascript - The Definitive Guide&lt;/i&gt;&amp;rdquo; good to have an API reference (as ebook), and &amp;ldquo;&lt;i&gt;Javascript and DHTML Cookbook&lt;/i&gt;&amp;rdquo; has the most useful recipes.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Lean Software Development &lt;/i&gt;by Poppendieck (Addison Wesley): easy to read, good presentation of software dev management problems and pragmatic solutions. My favorite on the subject. Another good one but very specific is &amp;ldquo;&lt;i&gt;Requirements Management&lt;/i&gt;&amp;rdquo; (MS Press).&lt;/li&gt;   &lt;li&gt;&lt;i&gt;UML Distilled &lt;/i&gt;by M Fowler: always useful to have if you need to draw UML diagrams.&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Algorithms in Java (Third Edition) Book Review</title>
      <link>http://chasethedevil.github.io/post/algorithms-in-java-third-edition-book-review/</link>
      <pubDate>Wed, 26 Apr 2006 12:26:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/algorithms-in-java-third-edition-book-review/</guid>
      <description>&lt;p&gt;The book &lt;a href=&#34;http://www.amazon.com/exec/obidos/redirect?link_code=ur2&amp;tag=michelin-20&amp;amp;amp;camp=1789&amp;creative=9325&amp;amp;path=http%3A%2F%2Fwww.amazon.com%2Fgp%2Fproduct%2F0471738840%2Fsr%3D8-1%2Fqid%3D1146046762%2Fref%3Dsr_1_1%3F%255Fencoding%3DUTF8&#34;&gt;Algorithms in Java&lt;/a&gt;&lt;img style=&#34;BORDER-RIGHT: medium none; BORDER-TOP: medium none; MARGIN: 0px; BORDER-LEFT: medium none; BORDER-BOTTOM: medium none&#34; height=&#34;1&#34; alt=&#34;&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=michelin-20&amp;l=ur2&amp;amp;o=1&#34; width=&#34;1&#34; border=&#34;0&#34; /&gt; is huge, but unlike the usual huge books, the content is very interesting. It can be used as reference material, or as toilet book (to learn things while you&amp;rsquo;re wasting time in the toilets).&lt;br /&gt;&lt;br /&gt;You will learn simple things, like what is the &amp;ldquo;raison d&amp;rsquo;être&amp;rdquo; of linked lists. The author gives very good examples to illustrate his propositions. He explains through the sieve of erathostene and through Josephus problem the advantages of arrays or linked list.&lt;br /&gt;&lt;br /&gt;You will learn step by step everything that is to be known in algorithms. Recursion, divide and conquer, Tree knowledge will be useful for the later sorting and searching chapters.&lt;br /&gt;&lt;br /&gt;The chapter on Hashing will make you understand very clearly why the source of String.hashCode() is&lt;br /&gt;&lt;pre&gt;&lt;span style=&#34;color:#006699;&#34;&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span style=&#34;color:#0099ff;&#34;&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt; &lt;span style=&#34;color:#9966ff;&#34;&gt;hashCode&lt;/span&gt;() &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;  &lt;span style=&#34;color:#0099ff;&#34;&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt; h &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt; hash;&lt;/pre&gt;&lt;pre&gt;&lt;span style=&#34;color:#006699;&#34;&gt;&lt;strong&gt;  if&lt;/strong&gt;&lt;/span&gt; (h &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt;&lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000;&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span style=&#34;color:#000000;&#34;&gt; &lt;/span&gt;    &lt;span style=&#34;color:#0099ff;&#34;&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt; off &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt; offset;&lt;/pre&gt;&lt;pre&gt;     &lt;span style=&#34;color:#0099ff;&#34;&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;/span&gt; val[] &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt; value;&lt;/pre&gt;&lt;pre&gt;     &lt;span style=&#34;color:#0099ff;&#34;&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt; len &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt; count;&lt;/pre&gt;&lt;pre&gt;     &lt;span style=&#34;color:#006699;&#34;&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;/span&gt; (&lt;span style=&#34;color:#0099ff;&#34;&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt; i &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000;&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;&amp;lt; &lt;/strong&gt;&lt;/span&gt; len; i&lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/span&gt;&lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/span&gt;) h &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000;&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/span&gt;h &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/span&gt; val[off&lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt; +&lt;/strong&gt;&lt;/span&gt;&lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/span&gt;];&lt;/pre&gt;&lt;pre&gt;     hash &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;/span&gt; h;&lt;/pre&gt;&lt;pre&gt;  &lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;  &lt;span style=&#34;color:#006699;&#34;&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/span&gt; h;&lt;/pre&gt;&lt;pre&gt;&lt;span style=&#34;color:#000000;&#34;&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt; &lt;/pre&gt;&lt;br /&gt;There might be too much info on different types of sorting algorithms and the book becomes there more a reference book than anything else. But overall, you will learn plenty with this book. It is very well written, complete, and will refresh one&amp;rsquo;s memory. I find it useful to read back things I learnt after a few years as I then have a very different view of the subject, and I pay closer attention to some details I completely missed the first time (sometimes). &lt;br /&gt;&lt;span class=&#34;technoratitag&#34;&gt;Tags: &lt;a href=&#34;http://www.technorati.com/tags/java&#34; rel=&#34;tag&#34;&gt;java&lt;/a&gt; &lt;a href=&#34;http://www.technorati.com/tags/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt; &lt;a href=&#34;http://www.technorati.com/tags/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SOA and B. Meyer</title>
      <link>http://chasethedevil.github.io/post/soa-and-b.-meyer/</link>
      <pubDate>Fri, 31 Mar 2006 15:08:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/soa-and-b.-meyer/</guid>
      <description>&lt;p&gt;While rereading parts of &amp;quot;Object Oriented Software Construction&amp;quot; from B. Meyer, I still find valuable information I overlooked. In the part about functional decomposition where he argues pro and cons of top-down / bottom-up approaches, he has the intuition of the current SOA hype. By showing that &lt;br&gt;&lt;br&gt;&lt;blockquote style=&#34;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&#34; class=&#34;gmail_quote&#34;&gt;&lt;font size=&#34;4&#34;&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Real systems have no top.&lt;/span&gt;&lt;/font&gt; &lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;He suggests that the only way to build complex software is through a service oriented architecture. Of course SOA is a very old concept. Meyer example of Operating Systems is a fine one.&lt;br&gt;&lt;br&gt;Another interesting remark is his object motto to design an object oriented system: &lt;br&gt;&lt;br&gt;&lt;blockquote style=&#34;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&#34; class=&#34;gmail_quote&#34;&gt;&lt;font size=&#34;4&#34;&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Ask not first what the system does:&lt;/span&gt; &lt;br style=&#34;font-weight: bold;&#34;&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Ask what it does it to!&lt;/span&gt;&lt;/font&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Non Fiction Books (Mostly Software Programming) Before 2003</title>
      <link>http://chasethedevil.github.io/post/non-fiction-books-mostly-software-programming-before-2003/</link>
      <pubDate>Wed, 15 Mar 2006 15:03:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/non-fiction-books-mostly-software-programming-before-2003/</guid>
      <description>&lt;p&gt;A page with useful reference for me as I don&amp;rsquo;t own each one of these books. It can provides you a very short review non-commercial biased.&lt;br /&gt;&lt;p class=&#34;dateheader&#34;&gt;&lt;span style=&#34;color: rgb(0, 153, 0);&#34;&gt;2003&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic;&#34;&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Programming Jakarta Struts&lt;/span&gt; &lt;/span&gt;(O&amp;rsquo;Reilly - Chuck Cavaness) much better than Manning book. Explains struts very clearly with a more interesting example. Not enough  on how to design your application for use with the evil ActionForm. Almost nothing on Struts 1.1 features. Nothing on common problems encountered while building web applications, or even about on how to design them using struts.&lt;/li&gt; &lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Struts In Action&lt;/span&gt; (Manning) not much more about struts than what&amp;rsquo;s available on struts website. Their example throughout the book is the same login example. Struts 1.1 features, esp DynaForm are mentioned but not really presented. On the positive side, there is a very useful Validator reference at the end and a too short mention of different strategies for the ActionForm.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Contributing to Eclipse&lt;/span&gt; (Kent Beck - Erich Gamma) funny little drawings inside to make some good points.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;The Design Patterns Java Companion&lt;/span&gt;(Adison Wesley - James W. Cooper) A must read for clean swing development. Essencial design patterns inside. Nice tip about doing deep cloning in java.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Java Threads&lt;/span&gt; (O&amp;rsquo;Reilly - Scott Oaks and Henry Wong) very clear presentation of multithreading programming in Java. Explain how to write your own thread scheduler.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;J2EE expert one on one &lt;/span&gt;(Wrox) pragmatic view of J2EE. Many interesting comments like why avoiding stateful session bean if you are a little bit concerned with performance. Some strange benchmarks at the end of the book showing velocity templates being 10x faster than JSPs.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Java Distributed Computing&lt;/span&gt;(O&amp;rsquo;Reilly - Jim Farley) very good to learn more about RMI because it starts with a custom distributed object system.&lt;/li&gt; &lt;li&gt;&lt;a name=&#34;Java Enterprise in a Nutshell&#34;&gt;&lt;/a&gt; &lt;div class=&#34;booktitle&#34;&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Java Enterprise in a Nutshell &lt;/span&gt;(O&amp;rsquo; Reilly - David Flanagan, Jim Farley, William Crawford, and Kris Magnusson) good complementary book, provides a good basis. I liked how RMI use in EJBs was detailed, Servlet chapter is also excellent (but don&amp;rsquo;t look for design tips/help in it - it is a book on the BASICS).&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div class=&#34;booktitle&#34;&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Enterprise Javabeans, second edition&lt;/span&gt; (O&amp;rsquo;Reilly - Richard Monson-Haefel) second lecture made me better appreciate that book, contains a lot of fundamental concepts to know. Very detailed on transaction management. However there is nothing I remember in it about EJB restrictions. In short incomplete but not bad.&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div class=&#34;booktitle&#34;&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Structure And Interpretation Of Computer Programs&lt;/span&gt; (MIT Press)&lt;br /&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&#34;dateheader&#34;&gt;&lt;span style=&#34;color: rgb(0, 153, 0);&#34;&gt;2002&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;A New Kind Of Science &lt;/span&gt;(S. Wolfram)&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Programming C# &lt;/span&gt;(O&amp;rsquo;Reilly) contains good and detailed information, is a nice lookup book when we want some information on a particular C# subject, and contains a nice example about programming Windows Forms without Visual Studio.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;C# Language Reference&lt;/span&gt; (Microsoft, june 2000) ok to lookup information but O&amp;rsquo;Reilly is usually better.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;C# .NET Web Developer&amp;rsquo;s Guide&lt;/span&gt; (Syngress) useful, good data on the CLI and on the C# compiled format. It is a nice book to learn C#.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;C#, Your visual blueprint for building .NET application&lt;/span&gt; ( ) not good, very Visual Studio centric.Filling up pages with obvious data.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Thinking in Pattern&lt;/span&gt; (Bruce Eickel) essencial oo design patterns&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;The Zope Book &lt;/span&gt;( ) good book to familiarize yourself with Zope&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Fractal Geometry of Nature &lt;/span&gt;(B. Mandelbrot) the spirit of Fractals, maybe good for people that already know a lot about fractals, otherwise kind of difficult to read sometimes because it does not detail ideas that much focusing more on the spirit.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Complete Java 2 Certification&lt;/span&gt; (SYBEX) do you know that a byte is signed and a char is 16 bits?&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Chaos and Fractals&lt;/span&gt; (German authors) makes fractals accessible to everyone including non graduates, while still being ambitious (Fractal dimension details, Julia set details&amp;hellip;). It is based on relatively classic mathematical approachs.&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;color: rgb(0, 153, 0);&#34; class=&#34;dateheader&#34;&gt;2001&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Java Security &lt;/span&gt;(O&amp;rsquo;Reilly) repetitive but very good overview of overall Java Security. In September 2001, it was the only book with a chapter on JAAS.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Learning Python &lt;/span&gt;(O&amp;rsquo;Reilly) ok to learn python.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Bluetooth demystified&lt;/span&gt; (N.J. Muller) first chapters are interesting to get an overview of bluetooth and its market potential. Then it describes the telecom technology behind bluetooth from scratch. A must read for people who have to program embedded bluetooth devices. It reminded me a little bit the GSM book. I would have liked a detailed technology comparison with its competitors (not only the spec comparison).&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;J2EE &lt;/span&gt;( ) just another rewriting of Sun specs&amp;hellip;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Programming Ruby, the pragmatic programmer&amp;rsquo;s guide &lt;/span&gt;( ) Excellent overview of Ruby but a little bit too much pro-Ruby. The first book on Ruby. In 2002, Ruby is now a bad choice of programming language because Python does everything as simply as Ruby does and has a much larger community.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Python Essencial Reference&lt;/span&gt; (New Riders) good because the python hypertext documentation has a really bad index and is not well organized.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Programming Python&lt;/span&gt; (O&amp;rsquo;Reilly) that book sucks.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Genetic Programming III, Darwinian Invention and problem solving&lt;/span&gt; (Koza) very good approach, nice comparison with evolutionnary theory + good introduction to LISP. First chapters must be read, then repetitive.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;How to solve it: Modern Heuristics&lt;/span&gt; (Springer) AI techniques overview. Not very useful because it describes the obvious with a lot of details and the difficult in a few words. Furthermore some very stupid comments like p358 &amp;ldquo;some have suggested (e.g. Walter Freeman) that digital implementation of neural network may fail to emulate the biological reality because real brain are chaotic analog devices. Digital computers can only approximate the behaviour of analog devices to a given degree of precision. This precision may not be sufficient to capture the chaotic dynamics that exist in the real brain&amp;rdquo;. 3 sentences to express a not-so-interesting remark, none of them add any details. Koza is much more interesting.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Professional JMS&lt;/span&gt; (Wrox) good overview of JMS, everything I needed to know about it.&lt;/li&gt;&lt;li&gt;&lt;a name=&#34;Professional J2EE&#34;&gt;&lt;/a&gt; &lt;div class=&#34;booktitle&#34;&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Professional J2EE &lt;/span&gt;(Wrox) really good on custom JSP tags. Some interesting design issues. Explicitely mention the restrictions of J2EE (even if he does not explicitely tell you how to avoid them). Unfortunaly their examples are not always very good and sometimes just too long (especially the XML/JSP part is crap).&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div class=&#34;booktitle&#34;&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Applied Cryptography&lt;/span&gt; (B. Schneier) The basis of cryptography, very detailed. Could be used as a reference manual.&lt;br /&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div class=&#34;booktitle&#34;&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Fast Food Nation&lt;/span&gt; (E. Schlosser) 1000 reasons not to eat cheap food. A social part and a chemical part, but mainly social. I found interesting to read &amp;ldquo;Americans with German ancestors far outnumber those with English ancestors&amp;rdquo;, (of course Schlosser is from German origin). A shame he did not specify any reference probing this fact.&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div class=&#34;booktitle&#34;&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;The Codebook&lt;/span&gt; ( ) history of cryptography describing the diverse techniques to encrypt or crack.&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&#34;dateheader&#34;&gt;&lt;span style=&#34;color: rgb(0, 153, 0);&#34;&gt;2000&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Web security&lt;/span&gt; ( ) some interesting parts but a lot of nothing.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Database Nation&lt;/span&gt; ( ) why worry about your private data? Authentification problems on social life.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;CCTV&lt;/span&gt;( ) first chapters interesting on the history of prisons and criminals. Then a lot of repetitive data on CCTV in England. CCTV means Closed Circuit TV i.e. surveillance systems for public areas.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;In Code&lt;/span&gt;(S. Flannery) nice introduction to cryptography and mathematics. At 16, she proposed a new authentification scheme quicker than RSA. My first slightly technical purchased book for my pleasure.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Java Server Pages&lt;/span&gt;, chapter 8 a must read for clean servlet/jsp programming: a nice presentation of MVC adapted to a web client through the command pattern. The rest of the book is much less interesting and much more entry-level. Professional JSP from Wrox is probably a much better book now.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;color: rgb(0, 153, 0);&#34; class=&#34;dateheader&#34;&gt;1999&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;GSM&lt;/span&gt; (don&amp;rsquo;t remember the title but it&amp;rsquo;s red and from the ENST)  everything about GSM technology, very well described and explained.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Lamps&lt;/span&gt; ( ) a lot of books on light/optics/lamp technology.&lt;/li&gt;&lt;/ul&gt;&lt;p style=&#34;color: rgb(0, 153, 0);&#34; class=&#34;dateheader&#34;&gt;1998&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-style: italic; font-weight: bold;&#34;&gt;Thinking in Java&lt;/span&gt; (Bruce Eickel) free and good to learn Java. Good chapters on Swing programmation. Swing was new at this time.&lt;/li&gt;&lt;/ul&gt;&lt;p class=&#34;dateheader&#34;&gt;&lt;span style=&#34;color: rgb(0, 153, 0);&#34;&gt;1997&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-weight: bold; font-style: italic;&#34;&gt;Java in a Nutshell&lt;/span&gt; (O&amp;rsquo;Reilly) my first Java book. Was ok to learn java but not that great. JDK API documentation should be removed from the book and replaced by a chapter on the Javadoc system.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span class=&#34;technoratitag&#34;&gt;Tags: &lt;a target=_top href=&#34;http://del.icio.us/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt;, &lt;a target=_top href=&#34;http://del.icio.us/tag/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Professional Portal Development Book Review</title>
      <link>http://chasethedevil.github.io/post/professional-portal-development-book-review/</link>
      <pubDate>Tue, 27 Dec 2005 12:08:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/professional-portal-development-book-review/</guid>
      <description>&lt;p&gt;I just finished reading &lt;span style=&#34;font-style: italic;&#34;&gt;Professional Portal Development With Open Source Tools&lt;/span&gt; (Wiley).&lt;br&gt; &lt;span style=&#34;font-weight: bold;&#34;&gt;&lt;br&gt; The Good:&lt;/span&gt;&lt;br&gt; &lt;br&gt; I enjoyed Chapter 1, it gives a good presentation of Portlets for someone who does not know much about it. It is a chapter one can use as a reference to verify some specific details of how Portlets are working. It is a bit similar to JSR 168 specifications, but I found it more detailed and well written.&lt;br&gt; &lt;br&gt; Beside Chapter 1, there are here and there useful information:&lt;br&gt; &lt;ul&gt;   &lt;li&gt;A presentation of Model 1 and 2(X) Architectures in relation with Portals. It could have been more detailed.&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;Example use of some Design Patterns in a Portal although the example use is really just one sentence and some Patterns uses are too obvious and not related to Portal (Singleton, Template Method).&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;Web Services for Remote Portlets.&lt;br&gt;   &lt;/li&gt; &lt;/ul&gt; &lt;br style=&#34;font-weight: bold;&#34;&gt; &lt;span style=&#34;font-weight: bold;&#34;&gt;The Bad And Ugly:&lt;br&gt; &lt;br&gt; &lt;/span&gt; I was disappointed by the remaining of the book. While it is good to mention Lucene, Apache James, OJB, Jakarta Slide, as those can be useful in Portal development, the book does not provide any useful information on those products. It would be difficult to put all that in just one book. The author merely gives kind of hello world examples for each technology, which I find quite useless.&lt;br&gt; &lt;br&gt; A quick presentation of software methodologies is again quite useless, and not what we expect from that kind of book. If I want to learn about software methodologies, I buy a book about it, I don&amp;rsquo;t buy a Portal Development book. &lt;br&gt; &lt;br&gt; The rest of the book really looks like a list of disconnected subjects, the important ones are not given more attention to the non-relevant ones. Portal Navigation is a problem you will encounter in any Portal development, but you won&amp;rsquo;t find much in the book except a short example. The author also writes with way too many words for the content about CVS, Subversion, JUnit, AntHill, Scarab. And then he goes on about Java Web Start, woohoo! Yes, it almost reads as well as a resume full of keywords.&lt;br&gt; &lt;br&gt; &lt;span style=&#34;font-weight: bold;&#34;&gt;Summary:&lt;br&gt; &lt;br&gt; &lt;/span&gt;Don&amp;rsquo;t buy this book.&lt;br&gt;&lt;span class=&#34;technoratitag&#34;&gt;Tags: &lt;a target=_top href=&#34;http://del.icio.us/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt; &lt;a target=_top href=&#34;http://del.icio.us/tag/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Good Software Books</title>
      <link>http://chasethedevil.github.io/post/good-software-books/</link>
      <pubDate>Thu, 17 Nov 2005 21:24:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/good-software-books/</guid>
      <description>&lt;p&gt;A friend asked me for a list, here is it. I found those books the most interesting ones among those I have read about software in the past year or two:&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;i&gt;Artificial Intelligence through Prolog&lt;/i&gt;, by Neil C. Rowe (Prentice-Hall): if you don&amp;rsquo;t remember much about Prolog, it&amp;rsquo;s a good book. It details how Prolog interpreters work.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;File Systems Forensic Analysis, &lt;/i&gt;by Brian Carrier (Addison Wesley): everything you need to know about disks and file systems, every trick to recover lost data. To go more in depth into file systems theory, you can read the free &lt;i&gt;&lt;a  href=&#34;http://www.nobius.org/%7Edbg/&#34;&gt;Practical File System Design with the Be File System&lt;/a&gt; &lt;/i&gt;from D. Giampaolo, the creator of BeFS.&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Mind Hacks &lt;/i&gt;(O&amp;rsquo;Reilly): you probably already bought that one. Not about software, but excellent.&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Practical Issues in Database Management&lt;/i&gt; by Fabian Pascal (Addison Wesley): short but concise book on relational database theory. F Pascal is of CJ Date school of thoughts, &amp;ldquo;null are evil&amp;rdquo;. You don&amp;rsquo;t need to read it if you have read any other similar book (by CJ Date for example).&lt;br&gt;   &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Inside The Java Virtual Machine,&lt;/i&gt; by Bill Venners (McGraw-Hill): there are other books on the same subject. While this book has some bad reviews, I found it an easy read, and it explain well enough for me all the inner details of Java. I found &amp;ldquo;Programming for the Java Virtual Machine&amp;rdquo; not better, and with some bad example of a Prolog language for the JVM (1 full chapter for this to present a way too simple thing to be of any use).&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Programming Jabber&lt;/i&gt;, by O&amp;rsquo;Reilly: I have read it 2 years ago, I enjoyed how they made you go through building a Jabber server.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Lucene In Action&lt;/i&gt;: the only book about Lucene, some of the info is useful to understand how it is designed.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Hibernate In Action:&lt;/i&gt; if you have to use hibernate, this is the book to read. It presents different ways of using it.&lt;/li&gt;   &lt;li&gt;some Javascript+DHTML(+CSS) book: useful if you have none. They often have good tricks to solve the usual problems. In the AJAX days, it becomes useful again. I find O&amp;rsquo;Reilly&amp;rsquo;s &amp;ldquo;&lt;i&gt;Javascript - The Definitive Guide&lt;/i&gt;&amp;rdquo; good to have an API reference (as ebook), and &amp;ldquo;&lt;i&gt;Javascript and DHTML Cookbook&lt;/i&gt;&amp;rdquo; has the most useful recipes.&lt;/li&gt;   &lt;li&gt;&lt;i&gt;Lean Software Development &lt;/i&gt;by Poppendieck (Addison Wesley): easy to read, good presentation of software dev management problems and pragmatic solutions. My favorite on the subject. Another good one but very specific is &amp;ldquo;&lt;i&gt;Requirements Management&lt;/i&gt;&amp;rdquo; (MS Press).&lt;/li&gt;   &lt;li&gt;&lt;i&gt;UML Distilled &lt;/i&gt;by M Fowler: always useful to have if you need to draw UML diagrams.&lt;/li&gt; &lt;/ul&gt; &lt;br&gt; Good luck!&lt;br&gt;&lt;span class=&#34;technoratitag&#34;&gt;Tags: &lt;a target=_top href=&#34;http://del.icio.us/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt; &lt;a target=_top href=&#34;http://del.icio.us/tag/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7 Years Later: Still EJBs</title>
      <link>http://chasethedevil.github.io/post/7-years-later-still-ejbs/</link>
      <pubDate>Mon, 07 Nov 2005 16:29:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/7-years-later-still-ejbs/</guid>
      <description>&lt;p&gt;In 1998, a student of my school had a project with Sun about EJBs. This was the beginning of EJBs, they were not public, and there was no J2EE. At that time he found it utterly complicated, and had difficulties to understand why they made it so complicated.&lt;br /&gt;&lt;br /&gt;In 2000, I worked for a company who had built in-house most components of a today J2EE application server. For example, they had their own unified messaging system, on the JSP side, they were already using custom tags, etc.. Their problem is that they took lots of time to develop in-house, all what later became standard, and almost freely available.&lt;br /&gt;&lt;br /&gt;Today, 7 years later, the big talk, new Java products, be it Spring, or JBoss Seam, are still all about the same ideas as in the first J2EE. Spring has the freedom to include whatever technology, but in the end, their scope closely matches J2EE scope. Service Oriented Architecture (SOA), the current buzzword, will come out relatively naturally with J2EE, session EJBs being natural candidate to expose functionalities to the outer world. JBoss (or Geronimo) architecture is fully SOA: a small kernel managing services, that are exposed for other to use.&lt;br /&gt;&lt;br /&gt;To learn about EJBs, I still find &lt;a href=&#34;http://www.amazon.com/exec/obidos/redirect?path=ASIN/059600530X&amp;link_code=as2&amp;amp;amp;camp=1789&amp;tag=michelin-20&amp;amp;creative=9325&#34;&gt;Enterprise JavaBeans&lt;/a&gt; by Richard Monson-Haefel, the best book. The chapter (in the 2nd Edition of the book, not in the 4th unfortunately) where he rolls his own distributed objects system is for me a testimony on how well he wants you to understand what&amp;rsquo;s behind EJBs. And if you want to better understand what&amp;rsquo;s behind RMI, &lt;a href=&#34;http://www.amazon.com/exec/obidos/redirect?path=ASIN/1565922069&amp;link_code=as2&amp;amp;amp;camp=1789&amp;tag=michelin-20&amp;amp;creative=9325&#34;&gt;Java Distributed Computing (O&amp;rsquo;Reilly)&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=michelin-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=1565922069&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; has a chapter where the author rolls his own RMI.&lt;br /&gt;&lt;br /&gt;To conclude, Sun was really clever in defining J2EE scope and branding several Java technologies as J2EE (despite the awful version naming). While the ideas were very good, the developer&amp;rsquo;s life was forgotten. It was too much a pain in the a** and not flexible enough (especially the ORM side). JBoss gets it right, what people need is a way to use pieces of J2EE, without imposing too much unnecessary hurdle on development.&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;technoratitag&#34;&gt;Tags: &lt;a href=&#34;http://del.icio.us/tag/java&#34; rel=&#34;tag&#34;&gt;java&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/ejb&#34; rel=&#34;tag&#34;&gt;ejb&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/j2ee&#34; rel=&#34;tag&#34;&gt;j2ee&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring Books Roundup Updated</title>
      <link>http://chasethedevil.github.io/post/spring-books-roundup-updated/</link>
      <pubDate>Mon, 10 Oct 2005 16:27:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/spring-books-roundup-updated/</guid>
      <description>&lt;p&gt;I am completing my &lt;a href=&#34;http://chasethedevil.blogspot.com/2005/10/spring-books-roundup.html&#34;&gt;Spring Books Roundup&lt;/a&gt; books with 2 new books:&lt;br /&gt;&lt;ul&gt;   &lt;li&gt;&lt;i&gt;Pro Spring&lt;/i&gt;, by Apress: a lengthy book, with some unnecessary information, but good overall. I did not like the Part 1, there is not much content in it. Fortunately, Part 2 is much better, dependency injection is very well described, almost on par, with the Fowler article of reference. Other Spring areas are well covered, in a similar manner as in Wrox book, except Java Server Faces, absent from the book, and nothing on Swing as well.&lt;br /&gt;  &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Spring Reference Documentation&lt;/i&gt;, from the &lt;a href=&#34;http://www.springframework.org/documentation&#34;&gt;springframework.org     &lt;/a&gt;website: I should have started with this one, it is of very good quality, and more up-to-date. There is notably a very good chapter on &amp;ldquo;Source Level Metadata Support&amp;rdquo; even if I don&amp;rsquo;t find particularly compelling that they chose yet another abstraction behind Java 5 annotations, partly to support older JDKs. Another plus is a chapter on JMX support, this was lacking in other books.&lt;/li&gt; &lt;/ul&gt; Interestingly most other books are very similar to the reference documentation, in their presentation and content. The reference documentation is extremely well written. Each time the author carefully explains what are the advantages of the Spring solution, or what does a particular feature solve. Only dependency injection and swing are not treated properly.&lt;br /&gt;&lt;br /&gt;To conclude, to best learn Spring I would advise:&lt;br /&gt;&lt;ol&gt;   &lt;li&gt;Read &lt;a href=&#34;http://www.martinfowler.com/articles/injection.html&#34;&gt;Fowler article&lt;/a&gt; about dependency injection.&lt;/li&gt;   &lt;li&gt;Read O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/exec/obidos/redirect?link_code=ur2&amp;amp;camp=1789&amp;tag=michelin-20&amp;amp;creative=9325&amp;path=http://www.amazon.com/gp/product/0596009100?v=glance%26n=283155%26n=507846%26s=books%26v=glance&#34;&gt;A Developer Notebook&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=michelin-20&amp;amp;l=ur2&amp;amp;o=1&#34; alt=&#34;&#34; style=&#34;border: medium none  ! important; margin: 0px ! important;&#34; border=&#34;0&#34; height=&#34;1&#34; width=&#34;1&#34; /&gt;. It is the most appropriate book, because the presentation is a bit different, focusing on quickly understanding Spring and using it in your project, and it is the only one mentioning Swing Spring features.&lt;br /&gt;  &lt;/li&gt;   &lt;li&gt;Read the reference manual to find out about the details you need for a specific feature.&lt;/li&gt; &lt;/ol&gt; &lt;span class=&#34;technoratitag&#34;&gt;Tags: &lt;a href=&#34;http://del.icio.us/tag/java&#34; rel=&#34;tag&#34;&gt;java&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/spring&#34; rel=&#34;tag&#34;&gt;spring&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring Books Roundup</title>
      <link>http://chasethedevil.github.io/post/spring-books-roundup/</link>
      <pubDate>Mon, 10 Oct 2005 11:15:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/spring-books-roundup/</guid>
      <description>&lt;p&gt;Spring is hip these days, so I decided to learn a bit more about it. I had used Avalon a while ago, I was attracted by its design by component and the way it seemed to lay out a proper infrastructure to build a server application. In the end, I was a bit disappointed, it required a bit too much glue code for my taste and did not provide that much in exchange. I don&amp;rsquo;t remember if, at that time, it was advertised as IoC (Inversion Of Control) container. This experience is one of the reasons why I did not jump on the Spring ship.&lt;br /&gt;I have read 3 books, here is what I thought of them, briefly:&lt;br /&gt;&lt;ul&gt;   &lt;li&gt;&lt;i&gt;Spring: A Developer&amp;rsquo;s Notebook&lt;/i&gt;, by O&amp;rsquo;Reilly: I enjoyed reading that book, because it is well written and has a good structure. It explains what is dependency injection by doing it without Spring, with Spring. But for a more complete understanding, I would recommend     &lt;a href=&#34;http://www.martinfowler.com/articles/injection.html&#34;&gt;Fowler article&lt;/a&gt;. There is an interesting chapter on Swing with Spring. Minor drawbacks is that it does not talk about Spring Timers and has very little on Remoting. But I would recommend that book.&lt;br /&gt; &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Spring In Action, by Manning&lt;/i&gt;: I was disappointed by that one, because there is not much more information than in O&amp;rsquo;Reilly, it is a bit less practical to use. While it is a bit more detailed than O&amp;rsquo;Reilly, I did not find the extra information very useful in general. Remoting is better covered here than in O&amp;rsquo;Reilly, but there is nothing on Swing.&lt;br /&gt; &lt;/li&gt;   &lt;li&gt;&lt;i&gt;Professional Java Development With The Sring Fram&lt;/i&gt;&lt;i&gt;p&lt;/i&gt;&lt;i&gt;ework&lt;/i&gt;, by Wrox: I liked that one better than Manning, but again information inside is very similar. I find the explanations more complete. Inversion Of Control is well presented (it is even comparing constructor injection with method injection). It gives examples of alternatives to XML configuration. Remoting is covered in greater details than Manning. I would recommend it over Manning anytime, and if it included a Swing chapter, I would recommend it over O&amp;rsquo;Reilly as well.&lt;/li&gt; &lt;/ul&gt; You can wonder a bit why there are 3 books on Spring, that similar. I believe there is space for other intelligent presentations of Spring. Subjects are often treated superficially. For example, look at the &lt;a href=&#34;http://www.martinfowler.com/articles/injection.html&#34;&gt;Fowler article&lt;/a&gt; versus the best chapter about IoC, the one from Wrox, and you&amp;rsquo;ll see how much more detailed it could have been. I find it a bit shocking since IoC is the basis of Spring. It would have been good to see a book explaining why Spring chose that particular design over another, for the main features, and presenting alternatives better. I would also have welcomed a book explaining the use of maybe just a few Spring aspects, but in the frame of a big, commercial application. For example after reading those books, it is not immediately clear to me what are Spring benefits when using Swing support versus other solutions. Another critic is that all those books were written around the same time, and are sometimes already obsolete. None of them describes Spring JDK 1.5 support  (for transactions or JMX or metadata). The official free Spring reference book seems better in many ways.&lt;br /&gt;&lt;br /&gt;Those books showed me Spring could be useful in some projects:&lt;br /&gt;&lt;ul&gt;   &lt;li&gt;if you want remoting.&lt;/li&gt;   &lt;li&gt;if you want to promote clean code, then you can promote the &amp;ldquo;Spring way&amp;rdquo;. It is a good one.&lt;/li&gt;   &lt;li&gt;if you want to use JSF. Spring makes JSF easy and natural to use.&lt;/li&gt; &lt;/ul&gt; On top of it you get AOP for easy debugging or profiling, which is always useful at some point.&lt;br /&gt;&lt;br /&gt;I am not convinced about Spring when it comes to:&lt;br /&gt;&lt;ul&gt;   &lt;li&gt;JDBC or database use: while Spring has a well done framework, Hibernate or iBatis have a very good API that makes Spring abstraction useless.&lt;/li&gt;   &lt;li&gt;MVC: it is does seem that much better than alternatives, nor much less intrusive (OK you can test it easily). Anyway I am not that big a fan of web MVC after having seen real world .NET projects without strict MVC well maintainable. I find the JSF backing beans at least as good and more flexible. Continuation frameworks are interesting too, but I am worried of their performance impact and scalability.&lt;br /&gt; &lt;/li&gt;   &lt;li&gt;Transactions: I just don&amp;rsquo;t think manual transactions are that bad or ugly or less maintainable. But using Spring for them is not necessarily a bad idea either.&lt;/li&gt;    &lt;/ul&gt; To me, the main alternative to Spring, and a very good one, is &lt;a href=&#34;http://www.jboss.com/&#34;&gt;JBoss&lt;/a&gt;. I will elaborate on that subject later in another post.&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;technoratitag&#34;&gt;Categories: &lt;a href=&#34;http://del.icio.us/tag/java&#34; rel=&#34;tag&#34;&gt;java&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/spring&#34; rel=&#34;tag&#34;&gt;spring&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Puzzlers - Can you figure this out?</title>
      <link>http://chasethedevil.github.io/post/java-puzzlers---can-you-figure-this-out/</link>
      <pubDate>Wed, 28 Sep 2005 16:04:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/java-puzzlers---can-you-figure-this-out/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;http://rcm.amazon.com/e/cm?t=michelin-20&amp;o=1&amp;p=8&amp;l=as1&amp;asins=032133678X&amp;fc1=000000&amp;=1&amp;lc1=0000ff&amp;bc1=000000&amp;lt1=_blank&amp;IS2=1&amp;bg1=ffffff&amp;f=ifr&#34; style=&#34;width:120px;height:240px;margin:5px&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34; align=&#34;left&#34;&gt;&lt;/iframe&gt;The book Java Puzzlers is quite good. I don&amp;rsquo;t think anyone can get every puzzle right. This shows again how you can very easily make someone fail interviews if you ask too silly questions. I suppose that if people were asking those questions they would not expect the right answers, but study the candidate reactions.&lt;br /&gt;&lt;br /&gt;Here is a sample:&lt;br /&gt;&lt;br /&gt;&lt;tt&gt;public class DosEquis {&lt;br /&gt;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char x = &amp;lsquo;X&amp;rsquo;;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int i = 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(true ? x : 0);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(false ? i : x);&lt;br /&gt;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;} &lt;/tt&gt;&lt;br /&gt;&lt;br /&gt;This will output &amp;ldquo;X88&amp;rdquo;. Obviously this is not good code, which is precisely one of the book objectives: to show how bad some practices can be. But at the same time you learn a bit more about the Java language and its possibilities. In the latter chapters they have more interesting puzzles.&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;technoratitag&#34;&gt;Tags: &lt;a href=&#34;http://del.icio.us/tag/java&#34; rel=&#34;tag&#34;&gt;java&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt;, &lt;a href=&#34;http://del.icio.us/tag/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is Prolog Better Suited Than SQL?</title>
      <link>http://chasethedevil.github.io/post/is-prolog-better-suited-than-sql/</link>
      <pubDate>Mon, 26 Sep 2005 15:36:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/is-prolog-better-suited-than-sql/</guid>
      <description>&lt;p&gt;I am currently reading a Prolog book &amp;ldquo;&lt;i&gt;Artificial Intelligence Through Prolog&lt;/i&gt;&amp;rdquo;, I have been doing a bit of Prolog when I was very young and wanted to refresh my memory a bit. It is a very interesting read, especially when I take the viewpoint of our current application where no ACID compliance is required.&lt;br /&gt;&lt;br /&gt;It seems to me that all the logic we coded to parametrize SQL queries and construct them dynamically could have been avoided if we had chosen Prolog as Prolog expressions would have been very natural to use in our project. With Prolog, there is no need to think about joins, type of joins, SQL syntax. It is at the level just higher. I wonder very much why Prolog did not become more mainstream as it seems to solve some problems in a much nicer, natural way.&lt;br /&gt;Here is a short example to get reviews of things by user or by user and tags or &amp;hellip;:&lt;br /&gt;&lt;ol&gt;   &lt;li&gt;let&amp;rsquo;s define some facts:&lt;br /&gt;  &lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;is_tag(tag1, user1, thing_id)&lt;/li&gt;     &lt;li&gt;is_tag(tag2, user1, thing_id)&lt;/li&gt;     &lt;li&gt;&amp;hellip;&lt;br /&gt;    &lt;/li&gt;     &lt;li&gt;review(user1, thing_id, description, extended, date)&lt;/li&gt;     &lt;li&gt;&amp;hellip;&lt;br /&gt;    &lt;/li&gt;   &lt;/ul&gt;   &lt;li&gt;review for user &amp;ldquo;user_x&amp;rdquo;&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;?review(user_x, THING_ID, DESC, EXT, DATE)&lt;br /&gt;    &lt;/li&gt;   &lt;/ul&gt;   &lt;li&gt;review for user &amp;ldquo;user_x&amp;rdquo; with tag &amp;ldquo;tag_y&amp;rdquo;&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;?review(user_x, THING_ID, DESC, EXT, DATE), is_tag(tag_y, user_x, THING_ID)&lt;/li&gt;   &lt;/ul&gt; &lt;/ol&gt; We could imagine some better ways to lay out information. This is just a first draft.&lt;br /&gt;&lt;br /&gt;Now of course, Prolog does not necessary makes sense for us because:&lt;br /&gt;  a) We already have it working in SQL&lt;br /&gt;  b) SQL is much more used and should therefore be more tunable, stable, etc.&lt;br /&gt;&lt;br /&gt;Still the Prolog way of things is interesting and powerful. We could have written a code with a logic near Prolog instead of our custom code.&lt;br /&gt;&lt;span class=&#34;technoratitag&#34;&gt;Tags: &lt;a target=_top href=&#34;http://del.icio.us/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt; &lt;a target=_top href=&#34;http://del.icio.us/tag/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inside the Java Virtual Machine</title>
      <link>http://chasethedevil.github.io/post/inside-the-java-virtual-machine/</link>
      <pubDate>Thu, 18 Aug 2005 11:03:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/inside-the-java-virtual-machine/</guid>
      <description>&lt;p&gt;I am reading an old book, &lt;a href=&#34;http://www.amazon.com/exec/obidos/redirect?link_code=ur2&amp;amp;camp=1789&amp;amp;tag=michelin-20&amp;amp;creative=9325&amp;amp;path=tg/detail/-/0079132480&#34;&gt;Inside the Java Virtual Machine&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=michelin-20&amp;amp;l=ur2&amp;amp;o=1&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;. Some old books don&amp;rsquo;t age, and this is one of them. The chapter on the Java Virtual Machine is just excellent and should be read by every Java developer. It explains each step a JVM does when you run a Java program, very clearly.&lt;br /&gt;&lt;br /&gt;You could get plenty of stupid interview questions from it like: How is the Java stack used? Between method area, heap, pc register, stack which one are shared among threads?&lt;br /&gt;&lt;br /&gt;Also they saw the full potential of Java quite early on (1997). They explain how the JVM specs allow for very different implementations, ones that can run in different environments, for example, simplifying a bit: low memory, embedded world, or lots of memory, mainframe world. It is not an accident if Microsoft chosed a very similar design for the CLI of .NET, they have been looking for getting into the embedded area for quite some time, and apparently, they are making good progress.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Tags: &lt;a href=&#34;http://technorati.com/tag/java&#34; rel=&#34;tag&#34;&gt;java&lt;/a&gt; &lt;a href=&#34;http://technorati.com/tag/programming&#34; rel=&#34;tag&#34;&gt;programming&lt;/a&gt;&lt;a href=&#34;http://technorati.com/tag/book&#34; rel=&#34;tag&#34;&gt;book&lt;/a&gt;&lt;a href=&#34;http://technorati.com/tag/review&#34; rel=&#34;tag&#34;&gt;review&lt;/a&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>