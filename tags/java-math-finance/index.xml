<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Math Finance on Chase the Devil</title>
    <link>http://chasethedevil.github.io/tags/java-math-finance/</link>
    <description>Recent content in Java Math Finance on Chase the Devil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2006-2016 Fabien Le Floc&#39;h. This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <lastBuildDate>Thu, 26 Nov 2009 09:17:00 +0000</lastBuildDate>
    <atom:link href="/tags/java-math-finance/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Pain of Java Matrix Libraries</title>
      <link>http://chasethedevil.github.io/post/the-pain-of-java-matrix-libraries/</link>
      <pubDate>Thu, 26 Nov 2009 09:17:00 +0000</pubDate>
      
      <guid>http://chasethedevil.github.io/post/the-pain-of-java-matrix-libraries/</guid>
      <description>Looking for a good Java Matrix (and actually also math) library, I was a bit surprised to find out there does not seem to be any really serious one still maintained.
Sure, there is Apache Commons Math, but it is still changing a lot, and it is not very performance optimized yet, while it has been active for several years already. There is also Java3D, it does Matrix through GMatrix, but not much linear algebra and if you look at their implementation, it is very basic, not performance oriented. <a href="/post/the-pain-of-java-matrix-libraries/">Read Moreâ€¦</a> <p>Copyright 2006-2016 Fabien Le Floc&#39;h. This work is licensed under a Creative Commons Attribution 4.0 International License.</p></description>
    </item>
    
  </channel>
</rss>
