<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howtobuildgoodsoftware on Chase the devil</title>
    <link>http://replace-this-with-your-hugo-site.com/tags/howtobuildgoodsoftware/</link>
    <description>Recent content in Howtobuildgoodsoftware on Chase the devil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Apr 2007 12:40:00 +0000</lastBuildDate>
    <atom:link href="http://replace-this-with-your-hugo-site.com/tags/howtobuildgoodsoftware/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Build Good Software? Good network connection</title>
      <link>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-good-network-connection/</link>
      <pubDate>Fri, 27 Apr 2007 12:40:00 +0000</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-good-network-connection/</guid>
      <description>&lt;p&gt;Not having good internet connection can be problematic to download new libraries, read or search for documentation on development subjects. But not having a good internal network connection is  killer of productivity. It means sometimes not being able to access integration, preprod or even production environment, or ssh session not responding in the middle of an action. As software makes an increasing use of the network, it means not being able to test or to use correctly all kind of software.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build Good Software? Private office, again</title>
      <link>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-private-office-again/</link>
      <pubDate>Wed, 25 Apr 2007 15:01:00 +0000</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-private-office-again/</guid>
      <description>&lt;p&gt;Apparently it&amp;rsquo;s more a habit of French companies to have big open spaces with no separation at all between people. There is nothing more annoying than having people in conference call in front of you while you are trying to work on something completely different. French people forgot the cubicle part in the American open space idea. So sometimes the room is just a big mess, everybody being able to disturb you anytime. Even if I have no private office, please give me at least a cubicle.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build Good Software? Welcome newcomers</title>
      <link>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-welcome-newcomers/</link>
      <pubDate>Wed, 18 Apr 2007 20:17:00 +0000</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-welcome-newcomers/</guid>
      <description>&lt;p&gt;Some companies do it naturally, some really don&amp;rsquo;t. In small companies, it is almost natural, people will make a newcomer productive very quickly. In a big company it&amp;rsquo;s not the same game.&lt;p style=&#34;text-align: left;&#34;&gt;Some important points are:&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Computer ready the first day, well sized (right ram, right power, developers are not MS office users), right OS.  I had experience with having not the right amount of ram, not the right version of OS, not the right user rights to install and use critical software for my work, and all those were known from the team. I also hate when companies give the cheapest computer available for developers/architects. On top of that badly configured computers take often a month to be ready in big companies. It just does not makes sense.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Network access. I have seen people coming for a short contract and not having network account or email account before 1 week.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Give documents to read, show applications the person will work with. Involve newcomer in new decisions on his project.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;Some big companies have it right. I remember my internship at IBM Germany, where on the first day I had a box waiting for me with computer inside, that I had to unpack and install (with OS/2) for my use. I think this is the best way for developers/tech people. And then they recommended excellent reading on the subject I would be working on. It&amp;rsquo;s not that difficult.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build Good Software? Use a bug management software, really.</title>
      <link>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-use-a-bug-management-software-really./</link>
      <pubDate>Fri, 13 Apr 2007 10:56:00 +0000</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-use-a-bug-management-software-really./</guid>
      <description>&lt;p&gt;This will seem obvious, unfortunately, when people are involved, nothing is that obvious. It&amp;rsquo;s not because you setup a bug/feature management software that people will use it. You have to force people to go through the bug management software each time they want something fixed. If you don&amp;rsquo;t do that some people will keep sending incomplete mails, or worse call you to get something fixed, that will be forgotten in a week. It is also very useful to avoid receiving 10x the same request from the same person.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build Good Software? Private Office</title>
      <link>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-private-office/</link>
      <pubDate>Wed, 11 Apr 2007 10:52:00 +0000</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-private-office/</guid>
      <description>&lt;p&gt;In an open space, people keep on coming to discuss various issues with various people, issues that have nothing to do with your work. You end up either being distracted, or annoyed by the increased noise level. &lt;p&gt;Apparently at Microsoft, they have private offices for each programmer. It might be extreme, paradoxally not in the XP (extreme programming) sense, but it is much better than open space for productivity. In XP, it&amp;rsquo;s almost the opposite with 2 developers working often together. &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build Good Software? Lay Off Quickly.</title>
      <link>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-lay-off-quickly./</link>
      <pubDate>Tue, 10 Apr 2007 11:12:00 +0000</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-lay-off-quickly./</guid>
      <description>&lt;p&gt;If you have to lay off in your job, do it quickly. I don&amp;rsquo;t understand companies that want to keep someone as long as legally possible when this someone wants to leave. First the employee won&amp;rsquo;t be as motivated, but more importantly, you will continue to train that person to your company&amp;rsquo;s software and ways of work. This would be much better used on another person, that will stay in the company. Time for layoffs should exclusively be used for knowledge transfer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build Good Software? Talk to people, especially the ones you don&#39;t know well.</title>
      <link>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-talk-to-people-especially-the-ones-you-dont-know-well./</link>
      <pubDate>Fri, 06 Apr 2007 17:02:00 +0000</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-talk-to-people-especially-the-ones-you-dont-know-well./</guid>
      <description>&lt;p&gt;Someone modified a simple launch script on a integration machine. This pissed off the author of the script. Why?&lt;/p&gt; &lt;p&gt;Just because the guy who modified the script never worked before with the author of the script. If only the author had been notified verbally or by mail of the modification, he would have been happy. Furthermore this would increase the quality of the change since the new guy might have made a change that has other impacts, that the author will best evaluate quickly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build Good Software? MS Press Code Complete says Measure twice, cut once</title>
      <link>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-ms-press-code-complete-says-measure-twice-cut-once/</link>
      <pubDate>Thu, 05 Apr 2007 14:14:00 +0000</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/how-to-build-good-software-ms-press-code-complete-says-measure-twice-cut-once/</guid>
      <description>&lt;p&gt;I am starting a series of posts about software construction, based on good and bad experiences while working for my many employers.&lt;br /&gt;&lt;br /&gt;&amp;ldquo;Software construction (a.k.a. architecture), is the only activity that&amp;rsquo;s guaranteed to happen on every project&amp;rdquo;. It is not rare that projects or new features are abandoned either because they are too costly, or because they are not needed anymore, or because they are other more important priorities.&lt;br /&gt;&lt;br /&gt;In the same vein: &amp;ldquo;Measure twice, cut once&amp;rdquo;. “Measure twice, cut once” is highly relevant to the construction part of software development, which can account for as much as 65 percent of the total project costs. The worst software projects end up doing construction two or three times or more. Doing the most expensive part of the project twice is as bad an idea in software as it is in any other line of work.&lt;br /&gt;&lt;br /&gt;When you see Software that change versions (major versions) while not really having been used much, this is a sign there is something wrong in the construction part.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>