<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Chase the Devil</title>
    <link>https://chasethedevil.github.io/tags/java/</link>
    <description>Recent content in Java on Chase the Devil</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright 2006-2018 Fabien Le Floc&#39;h. This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <lastBuildDate>Thu, 08 Mar 2018 20:56:42 +0100</lastBuildDate>
    <atom:link href="https://chasethedevil.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Senior Developers Don&#39;t Know OO Anymore</title>
      <link>https://chasethedevil.github.io/post/senior-developers-dont-know-oo-anymore/</link>
      <pubDate>Thu, 08 Mar 2018 20:56:42 +0100</pubDate>
      <guid>https://chasethedevil.github.io/post/senior-developers-dont-know-oo-anymore/</guid>
      <description>It has been a while since the good old object-oriented (OO) programming is not trendy anymore. Functional programming or more dynamic programming (Python-based) have been the trend, with an excursion in template based programming for C++ guys. Those are not strict categories: Python can be used in a very OO way, but it&amp;rsquo;s not how it is marketed or considered by the community.&#xA;Recently, I have seen some of the ugliest refactoring in my life as a programmer, done by someone with at least 10 years of experience programming in Java.</description>
    </item>
    <item>
      <title>Modern Programming Language for Monte-Carlo</title>
      <link>https://chasethedevil.github.io/post/modern-programming-language-for-monte-carlo/</link>
      <pubDate>Sat, 18 Apr 2015 22:58:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/modern-programming-language-for-monte-carlo/</guid>
      <description>A few recent programming languages sparked my interest:&#xA;Julia because of the wide coverage of mathematical functions, and great attention to quality of the implementations. It has also some interesting web interface. Dart: because it&amp;rsquo;s a language focused purely on building apps for the web, and has a supposedly good VM. Rust: it&amp;rsquo;s the latest fad. It has interesting concepts around concurrency and a focus on being low level all the while being simpler than C.</description>
    </item>
    <item>
      <title>On the Role of Static Types and Generic Types on Productivity</title>
      <link>https://chasethedevil.github.io/post/on-the-role-of-static-types-and-generic-types-on-productivity/</link>
      <pubDate>Sun, 29 Jun 2014 10:40:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/on-the-role-of-static-types-and-generic-types-on-productivity/</guid>
      <description>Most developers have strong opinions on dynamic types programming languages vs static types programming languages. The former is often assumed to be good for small projects/prototyping while the later better for bigger projects. But there is a surprisingly small number of studies to back those claims.&#xA;One such study is &#34;An experiment about static and dynamic type systems: doubts about the positive impact of static type systems on development time&#34;</description>
    </item>
    <item>
      <title>throws Exception</title>
      <link>https://chasethedevil.github.io/post/throws-exception/</link>
      <pubDate>Tue, 27 May 2014 10:49:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/throws-exception/</guid>
      <description>There was a big debate at work around Exception declaration in a Java API. I was quite surprised that such an apparently simple subject could end up being so controversial. The controversy was around the choice of declaring in the interfaces:&#xA;void myMethod() throws Exception&#xA;instead of&#xA;void myMethod() throws MyAPIException&#xA;void myMethod() throws MyAPIRuntimeException&#xA;void myMethod() where MyAPI represents either a generic API related exception or a specific exception related to the method in question.</description>
    </item>
    <item>
      <title>5 Minutes of Xtend</title>
      <link>https://chasethedevil.github.io/post/5-minutes-of-xtend/</link>
      <pubDate>Tue, 08 Apr 2014 17:37:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/5-minutes-of-xtend/</guid>
      <description>There is a relatively new JVM based language, Xtend. Their homepage says &amp;ldquo;JAVA 10, TODAY!&amp;rdquo;, so I thought I would give it a try, I was especially interested in operator overloading support, and the fact that it compiles to Java code, not Java byte code.&#xA;Unfortunately, after 5 minutes with it, and pasting some non Java code in an xtend file, Eclipse hangs forever, even on restart. After creating another workspace, just to trash the new workspace a similar way.</description>
    </item>
    <item>
      <title>Julia and the Cumulative Normal Distribution</title>
      <link>https://chasethedevil.github.io/post/julia-and-the-cumulative-normal-distribution/</link>
      <pubDate>Tue, 13 Aug 2013 15:52:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/julia-and-the-cumulative-normal-distribution/</guid>
      <description>I just stumbled upon Julia, a new programming language aimed at numerical computation. It&amp;rsquo;s quite new but it looks very interesting, with the promise of C like performance (thanks to LLVM compilation) with a much nicer syntax and parallelization features.Out of curiosity, I looked at their cumulative normal distribution implementation. I found that the (complimentary) error function (directly related to the cumulative normal distribution) algorithm relies on an algorithm that can be found in the Faddeeva library.</description>
    </item>
    <item>
      <title>Octave vs Scilab for PDEs in Finance</title>
      <link>https://chasethedevil.github.io/post/octave-vs-scilab-for-pdes-in-finance/</link>
      <pubDate>Tue, 30 Jul 2013 12:10:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/octave-vs-scilab-for-pdes-in-finance/</guid>
      <description>I was used to Scilab for small experiments involving linear algebra. I also like some of Scilab choices in algorithms: for example it provides PCHIM monotonic spline algorithm, and uses Cody for the cumulative normal distribution.&#xA;Matlab like software is particularly well suited to express PDE solvers in a relatively concise manner. To illustrate some of my experiments, I started to write a Scilab script for the Arbitrage Free SABR problem.</description>
    </item>
    <item>
      <title>The CUDA Performance Myth II</title>
      <link>https://chasethedevil.github.io/post/the-cuda-performance-myth-ii/</link>
      <pubDate>Fri, 12 Jul 2013 15:23:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/the-cuda-performance-myth-ii/</guid>
      <description>This is a kind of following to the CUDA performance myth. There is a recent news on the java concurrent mailing list about SplittableRandom class proposed for JDK8. It is a new parallel random number generator a priori usable for Monte-Carlo simulations.&#xA;It seems to rely on some very recent algorithm. There are some a bit older ones: the ancestor, L&amp;rsquo;Ecuyer MRG32k3a that can be parallelized through relatively costless skipTo methods, a Mersenne Twister variant MTGP, and even the less rigourous XorWow popularized by NVidia CUDA.</description>
    </item>
    <item>
      <title>Simple &#39;Can Scala Do This?&#39; Questions</title>
      <link>https://chasethedevil.github.io/post/simple-can-scala-do-this-questions/</link>
      <pubDate>Tue, 11 Jun 2013 00:28:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/simple-can-scala-do-this-questions/</guid>
      <description>Today, a friend asked me if Scala could pass primitives (such as Double) by reference. It can be useful sometimes instead of creating a full blown object. In Java there is commons lang MutableDouble. It could be interesting if there was some optimized way to do that.&#xA;One answer could be: it&amp;rsquo;s not functional programming oriented and therefore not too surprising this is not encouraged in Scala.&#xA;Then he wondered if we could use it for C#.</description>
    </item>
    <item>
      <title>SABR with the new Hagan PDE Approach</title>
      <link>https://chasethedevil.github.io/post/sabr-with-the-new-hagan-pde-approach/</link>
      <pubDate>Tue, 28 May 2013 15:56:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/sabr-with-the-new-hagan-pde-approach/</guid>
      <description>At a presentation of the Thalesians, Hagan has presented a new PDE based approach to compute arbitrage free prices under SABR. This is similar in spirit as Andreasen-Huge, but the PDE is directly on the density, not on the prices, and there is no one-step procedure: it&#39;s just like a regular PDE with proper boundary conditions.&#xA;I was wondering how it compared to Andreasen Huge results.&#xA;My first implementation was quite slow.</description>
    </item>
    <item>
      <title>A Fast Exponential Function in Java</title>
      <link>https://chasethedevil.github.io/post/a-fast-exponential-function-in-java/</link>
      <pubDate>Fri, 19 Apr 2013 16:48:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/a-fast-exponential-function-in-java/</guid>
      <description>In finance, because one often dicretize the log process instead of the direct process for Monte-Carlo simulation, the Math.exp function can be called a lot (millions of times for a simulation) and can be a bottleneck. I have noticed that the simpler Euler discretization was for local volatility Monte-Carlo around 30% faster, because it avoids the use of Math.exp.&#xA;Can we improve the speed of exp over the JDK one?</description>
    </item>
    <item>
      <title>Root finding in Lord Kahl Method to Compute Heston Call Price (Part II)</title>
      <link>https://chasethedevil.github.io/post/root-finding-in-lord-kahl-method-to-compute-heston-call-price-part-ii/</link>
      <pubDate>Thu, 11 Apr 2013 16:29:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/root-finding-in-lord-kahl-method-to-compute-heston-call-price-part-ii/</guid>
      <description>In my previous post, I explored the Lord-Kahl method to compute the call option prices under the Heston model. One of the advantages of this method is to go beyond machine epsilon accuracy and be able to compute very far out of the money prices or very short maturities. The standard methods to compute the Heston price are based on a sum/difference where both sides are far from 0 and will therefore be limited to less than machine epsilon accuracy even if the integration is very precise.</description>
    </item>
    <item>
      <title>Root finding in Lord Kahl Method to Compute Heston Call Price</title>
      <link>https://chasethedevil.github.io/post/root-finding-in-lord-kahl-method-to-compute-heston-call-price/</link>
      <pubDate>Tue, 09 Apr 2013 19:49:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/root-finding-in-lord-kahl-method-to-compute-heston-call-price/</guid>
      <description>I just tried to implement Lord Kahl algorithm to compute the Heston call price. The big difficulty of their method is to find the optimal alpha. That&amp;rsquo;s what make it work or break. The tricky part is that the function of alpha we want to minimize has multiple discontinuities (it&amp;rsquo;s periodic in some ways). This is why the authors rely on the computation of an alpha_max: bracketing is very important, otherwise your optimizer will jump the discontinuity without even noticing it, while you really want to stay in the region before the first discontinuity.</description>
    </item>
    <item>
      <title>From Double Precision Normal Density to Double Precision Cumulative Normal Distribution</title>
      <link>https://chasethedevil.github.io/post/from-double-precision-normal-density-to-double-precision-cumulative-normal-distribution/</link>
      <pubDate>Tue, 02 Apr 2013 14:24:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/from-double-precision-normal-density-to-double-precision-cumulative-normal-distribution/</guid>
      <description>Marsaglia in his paper on Normal Distribution made the same mistake I initially did while trying to verify the accuracy of the normal density.In his table of values comparing the true value computed by Maple for some values of x to the values computed by Sun or Ooura erfc, he actually does not really use the same input for the comparison. One example is the last number: 16.6. 16.6 does not have an exact representation in double precision, even though it is displayed as 16.</description>
    </item>
    <item>
      <title>Scala is Mad (part 2)</title>
      <link>https://chasethedevil.github.io/post/scala-is-mad-part-2/</link>
      <pubDate>Wed, 13 Feb 2013 16:20:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/scala-is-mad-part-2/</guid>
      <description>I still did not abandon Scala despite my previous post, mainly because I have already quite a bit of code, and am too lazy to port it. Furthermore the issues I detailed were not serious enough to motivate a switch. But these days I am more and more fed up with Scala, especially because of the Eclipse plugin. I tried the newer, the beta, and the older, the stable, the conclusion is the same.</description>
    </item>
    <item>
      <title>Scala is Mad</title>
      <link>https://chasethedevil.github.io/post/scala-is-mad/</link>
      <pubDate>Wed, 12 Dec 2012 16:07:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/scala-is-mad/</guid>
      <description>I spent quick a bit of time to figure out why something that is usually simple to do in Java did not work in Scala: Arrays and ArrayLists with generics.&#xA;For some technical reason (type erasure at the JVM level), Array sometimes need a parameter with a ClassManifest !?! a generic type like [T :&amp;lt; Point : ClassManifest] need to be declared instead of simply [T :&amp;lt; Point].&#xA;And then the quickSort method somehow does not work if invoked on a generic.</description>
    </item>
    <item>
      <title>Scala Again</title>
      <link>https://chasethedevil.github.io/post/scala-again/</link>
      <pubDate>Mon, 06 Feb 2012 17:52:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/scala-again/</guid>
      <description>I am trying Scala again. Last time, several years ago, I played around with it as a web tool, combining it with a Servlet Runner like Tomcat. This time, I play around with it for some quantitative finance experiments.&#xA;Why Scala? It still seem the most advanced alternative to Java on the JVM, and the mix of functional programming and OO programming is interesting. Furthermore it goes quite far as it ships with its own library.</description>
    </item>
    <item>
      <title>exp(y*log(x)) Much Faster than Math.pow(x,y)</title>
      <link>https://chasethedevil.github.io/post/expylogx-much-faster-than-math.powxy/</link>
      <pubDate>Fri, 08 Apr 2011 23:03:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/expylogx-much-faster-than-math.powxy/</guid>
      <description>Today I found out that replacing Math.pow(x,y) by Math.exp(yMath.log(x))* made me gain 50% performance in my program. Of course, both x and y are double in my case. I find this quite surprising, I expected better from Math.pow.</description>
    </item>
    <item>
      <title>SIMD and Mersenne-Twister</title>
      <link>https://chasethedevil.github.io/post/simd-and-mersenne-twister/</link>
      <pubDate>Sat, 05 Feb 2011 13:18:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/simd-and-mersenne-twister/</guid>
      <description>Since 2007, there is a new kind of Mersenne-Twister (MT) that exploits SIMD architecture, the SFMT. The Mersenne-Twister has set quite a standard in random number generation for Monte-Carlo simulations, even though it has flaws.&#xA;I was wondering if SFMT improved the performance over MT for a Java implementation. There is actually on the same page a decent Java port of the original algorithm. When I ran it, it ended up slower by more than 20% than the classical Mersenne-Twister (32-bit) on a 64-bit JDK 1.</description>
    </item>
    <item>
      <title>The CUDA Performance Myth</title>
      <link>https://chasethedevil.github.io/post/the-cuda-performance-myth/</link>
      <pubDate>Mon, 03 Jan 2011 16:07:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/the-cuda-performance-myth/</guid>
      <description>There is an interesting article on how to generate efficiently the inverse of the normal cumulative distribution on the GPU. This is useful for Monte-Carlo simulations based on normally distributed variables.&#xA;Another result of the paper is a method (breakless algorithm) to compute it apparently faster than the very good Wichura&amp;rsquo;s AS241 algorithm on the CPU as well keeping a similar precision. The key is to avoid branches (if-then) at the cost of not avoiding log() calls.</description>
    </item>
    <item>
      <title>Another Look at Java Matrix Libraries</title>
      <link>https://chasethedevil.github.io/post/another-look-at-java-matrix-libraries/</link>
      <pubDate>Mon, 29 Nov 2010 12:45:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/another-look-at-java-matrix-libraries/</guid>
      <description>A while ago, I was already looking for a good Java Matrix library, complaining that there does not seem any real good one where development is still active: the 2 best ones are in my opinion Jama and Colt.&#xA;Recently I tried to price options via RBF (radial basis functions) based on TR-BDF2 time stepping. This is a problem where one needs to do a few matrix multiplications and inverses (or better, LU solve) in a loop.</description>
    </item>
    <item>
      <title>Java enum Is Evil</title>
      <link>https://chasethedevil.github.io/post/java-enum-is-evil/</link>
      <pubDate>Thu, 12 Aug 2010 17:32:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-enum-is-evil/</guid>
      <description>Before Java 1.5, I never really complained about the lack of enum keyword. Sure the old enum via class pattern was a bit verbose at first (N.B.: Java 1.5 enums can also be verbose once you start adding methods to them). But more importantly, you would often use the table lookup pattern in combination.&#xA;The problem with Java 1.5 enum is that it is not Object-Oriented. You can&#39;t extend an enum, you can&#39;t add an element in an existing enum.</description>
    </item>
    <item>
      <title>A Very Interesting Feature of Scala</title>
      <link>https://chasethedevil.github.io/post/a-very-interesting-feature-of-scala/</link>
      <pubDate>Sat, 07 Aug 2010 12:35:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/a-very-interesting-feature-of-scala/</guid>
      <description>I tried Scala a few years ago. There are several good ideas in it, but I found the language to be a bit too complicated to master. But I recently stubbled upon a paper on Scala generics&amp;nbsp;that might change my mind about using Scala.&#xA;Scala Generics used to work in a similar way as Java Generics: via type erasure. One main reason is compatibility with Java, another is that C++ like templates make the code base blow up.</description>
    </item>
    <item>
      <title>Diffusion Limited Aggregation Applet</title>
      <link>https://chasethedevil.github.io/post/diffusion-limited-aggregation-applet/</link>
      <pubDate>Wed, 09 Jun 2010 14:05:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/diffusion-limited-aggregation-applet/</guid>
      <description>Yes, I wrote an applet. I know it is very 1990s but, amazingly, it still does the job quite well. Ok, next time I should really use Flash to do this.&#xA;The Applet simulates Diffusion Limited Aggregation as described in Chaos And Fractals from Peitgen, Juergens, and Saupe. It represents ions randomly wandering around (in a Brownian motion) until they are caught by an attractive force in electrochemical deposition experiment.</description>
    </item>
    <item>
      <title>Java &amp; 3D Surface</title>
      <link>https://chasethedevil.github.io/post/java--3d-surface/</link>
      <pubDate>Fri, 18 Dec 2009 16:07:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java--3d-surface/</guid>
      <description>I have been looking all around the web for a Java library that can draw a simple 3D surface. And I did not find any. Most charting library, including the well known JFreeChart, can only draw 2D charts.&#xA;I am quite shocked that something that has been in Excel for 15 years is still not available in Java. And it&amp;rsquo;s not easy to make your own.</description>
    </item>
    <item>
      <title>double[][] Is Fine</title>
      <link>https://chasethedevil.github.io/post/double-is-fine/</link>
      <pubDate>Thu, 26 Nov 2009 14:51:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/double-is-fine/</guid>
      <description>In my previous post, I suggest that keeping a double[] performs better than keeping a double[][] if you do matrix multiplications and other operations.&#xA;This is actually not true. I benchmarked 3 libraries, Colt (uses double[]), Apache Commons Math (uses double[][]) and Jama (uses double[][] cleverly). At first it looks like Jama has a similar performance as Colt (they avoid [][] slow access by a clever algorithm). But once hotspot hits, the difference is crazy and Jama becomes the fastest (Far ahead).</description>
    </item>
    <item>
      <title>Java Calendar Is Broken On JVM Upgrade</title>
      <link>https://chasethedevil.github.io/post/java-calendar-is-broken-on-jvm-upgrade/</link>
      <pubDate>Wed, 19 Aug 2009 13:47:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-calendar-is-broken-on-jvm-upgrade/</guid>
      <description>We ran into an interesting issue with TimeZone and Dates. If you print the same date on different JVMs, it might show a different printed date.&#xA;The reason behind this is the daylight saving time conventions. An old JVM won&#39;t necessarily have the same daylight saving time for a given TimeZone than a latest JVM, and therefore will interpret the date differently.&#xA;Here is the output of a very simple program on 2 different JVMs.</description>
    </item>
    <item>
      <title>Java int Overflow Behavior</title>
      <link>https://chasethedevil.github.io/post/java-int-overflow-behavior/</link>
      <pubDate>Mon, 15 Jun 2009 16:15:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-int-overflow-behavior/</guid>
      <description>A coworker recently asked me if there was a guaranteed behavior in the case of int overflow. He gave the specific example on:&#xA;can we rely that int x = Integer.MAX_VALUE + 1 is the same for every JVM on any platform?&#xA;I thought the answer would be easy to find in the Java specifications document. But I was wrong. It is not clearly defined.&#xA;I found a trick that suggests this behavior is indeed standard and will stay the same, it is related to type casting.</description>
    </item>
    <item>
      <title>Static Fields and Inheritance</title>
      <link>https://chasethedevil.github.io/post/static-fields-and-inheritance/</link>
      <pubDate>Mon, 15 Jun 2009 16:02:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/static-fields-and-inheritance/</guid>
      <description>Someone asked me recently to find out the real reason why the code from this thread fails. This is a fairly bad code, and not even a very good way to point out the problem. But the question is nonetheless interesting.&#xA;class Toto extends TotoParent{&#xA;final static Toto a = new Toto (&#34;a&#34;);&#xA;public Toto(String a){&#xA;super(a);&#xA;}&#xA;}&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;public abstract class TotoParent {&#xA;static List list = new ArrayList();</description>
    </item>
    <item>
      <title>Benchmarking Languages Is Difficult</title>
      <link>https://chasethedevil.github.io/post/benchmarking-languages-is-difficult/</link>
      <pubDate>Wed, 03 Jun 2009 16:53:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/benchmarking-languages-is-difficult/</guid>
      <description>I often looked at the famous computer languages shootout for fun. Recently I noticed they had the infamous thread ring test. I posted not very long ago several blog entries about it showing how silly this test was.&#xA;Looking at the existing Java implementation for the test I decided to try to submit the tricky one using a pool of thread, and pooling message processing rather creating 1 thread per node.</description>
    </item>
    <item>
      <title>Cholesky &amp; Jakarta Commons Math</title>
      <link>https://chasethedevil.github.io/post/cholesky--jakarta-commons-math/</link>
      <pubDate>Fri, 15 May 2009 19:01:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/cholesky--jakarta-commons-math/</guid>
      <description>In Finance, Cholesky is a useful way to decompose Matrix. It is not so simple to find a BSD licensed code using cholesky (most of them are GPL like this one). There is one in Apache Commons Maths library, which is a very interesting library. However for performance, it is still not very practical for some things like Cholesky.&#xA;Looking at the source one can easily understand why. I did a small (many people will say not representative 1 million loop test) and finds out:</description>
    </item>
    <item>
      <title>Java Logging Still Crap in 2009</title>
      <link>https://chasethedevil.github.io/post/java-logging-still-crap-in-2009/</link>
      <pubDate>Fri, 24 Apr 2009 15:01:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-logging-still-crap-in-2009/</guid>
      <description>When java logging API was first introduced in JDK 1.4 in 2002, it caused quite a lot a fuss around, with everybody asking &amp;ldquo;Why did not they just include Log4j instead of creating their own bastard child?&amp;rdquo;.&#xA;I remember having looked at it very shortly before continuing using Log4j on all projects I have been involved with.&#xA;Today, while doing a very small project, I tried once more to use java logging.</description>
    </item>
    <item>
      <title>Bachelier vs. Black</title>
      <link>https://chasethedevil.github.io/post/bachelier-vs.-black/</link>
      <pubDate>Mon, 23 Mar 2009 17:58:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/bachelier-vs.-black/</guid>
      <description>Black and Scholes gives a strange result for the price of a binary option under high volatility. You will learn here how to simulate a stock price evolution using Java, and how to show it using JFreeChart library. It starts with more complex concepts (don&#39;t be afraid) and goes done towards simpler things.&#xA;I could not write all that in a blog format, so I created a old HTML page about it here and a PDF version.</description>
    </item>
    <item>
      <title>Senior Developers Team Productivity X4 (from MS Research Paper)</title>
      <link>https://chasethedevil.github.io/post/senior-developers-team-productivity-x4-from-ms-research-paper/</link>
      <pubDate>Tue, 10 Feb 2009 10:44:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/senior-developers-team-productivity-x4-from-ms-research-paper/</guid>
      <description>There is a very interesting MS Research paper about test driven development (TDD). It is one of the only real study about it that I know of. The paper conclusions from experiments over 4 TDD teams vs 4 traditional teams is:&#xA;&#34;TDD seems to be applicable in various domains and can significantly reduce the defect density of developed software without significant productivity reduction of the development team&#34;Their data gives also other interesting results:</description>
    </item>
    <item>
      <title>The End Of Rings Around Plain Java - A Better Concurrency Test</title>
      <link>https://chasethedevil.github.io/post/the-end-of-rings-around-plain-java---a-better-concurrency-test/</link>
      <pubDate>Thu, 15 Jan 2009 15:54:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/the-end-of-rings-around-plain-java---a-better-concurrency-test/</guid>
      <description>In my previous post, I was wondering why single thread was faster. D Andreou gave the correct explanation: as we send only 1 start message and as each node only send 1 message to the next one, there is always only 1 message being processed. So the test is optimum on 1 thread. It does not make much sense to make a multithreading benchmark on a problem that is fundamentally single threaded.</description>
    </item>
    <item>
      <title>Running Rings Around Plain Java - The Killer Code</title>
      <link>https://chasethedevil.github.io/post/running-rings-around-plain-java---the-killer-code/</link>
      <pubDate>Thu, 08 Jan 2009 13:21:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/running-rings-around-plain-java---the-killer-code/</guid>
      <description>I wrote my previous post too fast. I found a very simple change that increases the speed x6!&#xA;The idea is too process messages in a ThreadPoolExecutor. As my Nodes are Runnable, I just needed to initialize a common ThreadPoolExecutor, and in a sendMessage, execute the runnable each time.&#xA;Here is the full code: public&amp;nbsp;class&amp;nbsp;OptimizedRing {&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ExecutorService executor;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;Exception {&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OptimizedRing ring = new&amp;nbsp;OptimizedRing();&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RingNode node = ring.startRing(Integer.parseInt(args[0]));&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node.sendMessage(new&amp;nbsp;StartMessage());&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}</description>
    </item>
    <item>
      <title>Running rings around plain Java</title>
      <link>https://chasethedevil.github.io/post/running-rings-around-plain-java/</link>
      <pubDate>Thu, 08 Jan 2009 12:26:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/running-rings-around-plain-java/</guid>
      <description>Alex Miller has a very interesting test of Actors. He finds out Scala performance is relatively low compared to Erlang, and Kilim is very near Erlang. But Kilim code is the most difficult to read in the lot.&#xA;I thought it would be simple to just do the same test in plain Java. I wrote the code for it duplicating the scala logic using Threads instead of Actors.&#xA;public class SimpleRing { public static void main(String[] args) throws Exception { SimpleRing ring = new SimpleRing(); RingNode node = ring.</description>
    </item>
    <item>
      <title>More Double Troubles</title>
      <link>https://chasethedevil.github.io/post/more-double-troubles/</link>
      <pubDate>Tue, 06 Jan 2009 12:12:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/more-double-troubles/</guid>
      <description>We saw in a previous entry how one has to be careful with Double.NaN. Today we will see how regular double can cause problems. By the way the NaN issue was not Java specific and this issue is also general in different programming languages.&#xA;A coworker was shocked that in Java (I was a bit surprised he saw that only today, but it is true it can be surprising that such a simple thing does not work as expected):</description>
    </item>
    <item>
      <title>Java Programmers Are Idiots?</title>
      <link>https://chasethedevil.github.io/post/java-programmers-are-idiots/</link>
      <pubDate>Wed, 17 Dec 2008 20:16:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-programmers-are-idiots/</guid>
      <description>My brother just sent me a funny quote. I don&amp;rsquo;t know if it is true or not:&#xA;entwickeln Sie lieber überzeugende Lösungen anstatt viele Stunden mit Coding zu verbringen? Ist Ihnen die Produktivität Ihres Teams wichtig?&#xA;Mark Driver, VP Research von Gartner, kommentierte kürzlich&#xA;&amp;ldquo;Here’s a simple equation. In terms of mental fortitude&amp;hellip; 1 Smalltalk developer = 2.5 C++ developers 1 C++ developer = 1.5 Java developers&amp;rdquo;.&#xA;You don&amp;rsquo;t need german to understand.</description>
    </item>
    <item>
      <title>Double.NaN Is Evil</title>
      <link>https://chasethedevil.github.io/post/double.nan-is-evil/</link>
      <pubDate>Tue, 09 Dec 2008 16:23:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/double.nan-is-evil/</guid>
      <description> I don&#39;t know what Sun had in mind when creating Double.NaN number. It is very inintuitive to use. I am sure every single developer out there fell in the trap of trying to find out if a double was NaN or not using:&#xA;Double.NaN == myDouble&#xA;This does not work (I don&#39;t know the real reason why), one has to use:&#xA;Double.isNaN(myDouble)&#xA;Not intuitive! </description>
    </item>
    <item>
      <title>Grails Spring Union Not Surprising</title>
      <link>https://chasethedevil.github.io/post/grails-spring-union-not-surprising/</link>
      <pubDate>Thu, 27 Nov 2008 17:18:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/grails-spring-union-not-surprising/</guid>
      <description>Looking out at some old post. I found out I was not far from the truth in January 2008 when I stated:&amp;ldquo;In 2008 the Ruby On Rails mentality will continue to prevail. In the Java world, Grails is the most likely to benefit from it. (&amp;hellip;) It could also be something based around Spring as their current MVC solution is not very good and very old fashioned.&amp;quot;I don&amp;rsquo;t think I will be right with the provocative Java is dead.</description>
    </item>
    <item>
      <title>Java Is Dead</title>
      <link>https://chasethedevil.github.io/post/java-is-dead/</link>
      <pubDate>Fri, 21 Nov 2008 20:24:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-is-dead/</guid>
      <description>These days, I have the feeling that Java is dead. Even if, or maybe because I have used Java so much in the past 10 years, I have this feeling.&#xA;In 1998 Java was revolutionary. It was a very simple to learn object oriented language with modern concepts and familiar syntax. Furthermore the standard library had neat features like internet networking and it could be integrated in the browser. All this at a time when the internet just started to be popular.</description>
    </item>
    <item>
      <title>OO Desillusion</title>
      <link>https://chasethedevil.github.io/post/oo-desillusion/</link>
      <pubDate>Thu, 28 Aug 2008 17:00:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/oo-desillusion/</guid>
      <description>I have read many inspiring books about object oriented programming. I find B. Meyer Object Oriented Software Construction one of the best in the lot. B. Meyer tries to explain in a progressive way why OO is better, by introducing it bit by bit. I have read different related design patterns book, the GoF one, Martin Fowler ones. I have been programming Java for about 10 years now. And yet, today, I feel unconvinced.</description>
    </item>
    <item>
      <title>Java Compilation Performance / Processor Speed</title>
      <link>https://chasethedevil.github.io/post/java-compilation-performance--processor-speed/</link>
      <pubDate>Tue, 01 Jul 2008 19:50:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-compilation-performance--processor-speed/</guid>
      <description>I just found out my laptop was faster in default settings than my home desktop to compile a resonably sized project (5 min vs 6 min). I was surprised as I thought the disk in the desktop would make a big difference. The processor in my desktop is not that great (simple pentium e2180). My laptop has a 2ghz core2duo processor. In Ghz processor are of the same speed.&#xA;I tried to overclock my home pc to see what difference it could make, I made it run at 2.</description>
    </item>
    <item>
      <title>DecimalFormat Is Broken</title>
      <link>https://chasethedevil.github.io/post/decimalformat-is-broken/</link>
      <pubDate>Wed, 14 May 2008 18:19:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/decimalformat-is-broken/</guid>
      <description>A friend of mine recently noticed that the good old DecimalFormat class is &#34;broken&#34;. If you try to parse a string that is not a number but is starting with a number, the DecimalFormat.parse will return what it managed to parse.&#xA;The correct behavior should be to throw a parse exception IMHO. Judging from an old post in the Sun bug tracker, The folks at Sun don&#39;t think it really is, they call the default mode of parsing the &#34;</description>
    </item>
    <item>
      <title>Using MiG Layout For Better Swing Development</title>
      <link>https://chasethedevil.github.io/post/using-mig-layout-for-better-swing-development/</link>
      <pubDate>Tue, 29 Apr 2008 18:27:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/using-mig-layout-for-better-swing-development/</guid>
      <description>I have forgotten a few libraries in my Better Swing Development article, and notably MiGLayout.&#xA;GridBagLayout is too verbose, and still feels too clumsy. This is why a while back I wrote a small tool to help visualize various GridBagLayouts for people who are not used to it. But it would have been much simpler to use a better layout instead.&#xA;MiGLayout is good, I managed to have good results without almost any practices on not so simple layouts.</description>
    </item>
    <item>
      <title>SwiXml Review</title>
      <link>https://chasethedevil.github.io/post/swixml-review/</link>
      <pubDate>Thu, 24 Apr 2008 12:19:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/swixml-review/</guid>
      <description>Externalizing the screen layout is a natural step for many applications. It can be because a customer might want a slightly different presentation, or just for the sake of clearly separating layout code, or for using a kind of screen generator. Back in 2003, I wrote a small utility to help with GridBagLayout, nothing fantastic, but there was the feature of saving a generated layout in XML (or Beanshell) and using it in an application.</description>
    </item>
    <item>
      <title>Better Java Swing Development</title>
      <link>https://chasethedevil.github.io/post/better-java-swing-development/</link>
      <pubDate>Thu, 17 Apr 2008 20:55:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/better-java-swing-development/</guid>
      <description>It has been a while since I have looked at the different options for building GUIs in Java. I like the approach taken by Eclipse, they provide not only GUI components, but a complete GUI application framework. Several years ago, I have stolen ideas from it (how they manage plugins) and applied it for Swing applications. This worked out quite well. The Netbeans platform now offers a more interesting alternative if you have to do Swing.</description>
    </item>
    <item>
      <title>The 2008 Java Web Framework</title>
      <link>https://chasethedevil.github.io/post/the-2008-java-web-framework/</link>
      <pubDate>Tue, 22 Jan 2008 11:50:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/the-2008-java-web-framework/</guid>
      <description>One of my first web framework was a custom one, based on the book Web Development with Java Server Pages. That was in 1999, when Struts was not yet known. But it was web-MVC, very near from what Struts gave later, without the custom tag stuff (custom tags were not yet part of JSP specifications).&#xA;Until 2007, Struts was IMHO the most used web framework and the default choice, even though many contenders appeared, with more features, better code.</description>
    </item>
    <item>
      <title>Apache DbUtils Completely Useless</title>
      <link>https://chasethedevil.github.io/post/apache-dbutils-completely-useless/</link>
      <pubDate>Fri, 02 Nov 2007 17:17:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/apache-dbutils-completely-useless/</guid>
      <description>I am disappointed about the Jarkarta Commons DbUtils project. I give a link to it, because it&amp;rsquo;s a bad project (even if written in clean code). It is very simple, but it really does not do much for you.&#xA;I was looking for a very simple abstraction of JDBC. I thought bringing Spring in my project would be overkill. After trying DbUtils, I think again. It does not help. It does not handle frequent cases well, and it does not save many lines of code.</description>
    </item>
    <item>
      <title>I fell in the trap of Boolean.getBoolean()</title>
      <link>https://chasethedevil.github.io/post/i-fell-in-the-trap-of-boolean.getboolean/</link>
      <pubDate>Fri, 12 Oct 2007 16:10:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/i-fell-in-the-trap-of-boolean.getboolean/</guid>
      <description>I was struggling to find a bug in a very simple application, it ended up being something as simple as using the damned Boolean.getBoolean(&amp;quot;true&amp;quot;) call instead of Boolean.valueOf(&amp;quot;true&amp;quot;).booleanValue() call. The Boolean.getBoolean method is something you almost never need to use, as it checks if a particular system property is true or false. There is a similar method for Integer.getInteger, and a quick google search shows I am not the only one to think those method should never have been part of the basic API for Boolean/Integer.</description>
    </item>
    <item>
      <title>Fast Web Development With Scala</title>
      <link>https://chasethedevil.github.io/post/fast-web-development-with-scala/</link>
      <pubDate>Tue, 25 Sep 2007 14:02:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/fast-web-development-with-scala/</guid>
      <description>I am currently experimenting with Scala. It seems quite convenient for web applications. Using Tomcat, it is possible to have a very productive developer environment.&#xA;Here is a sample Embedded Tomcat you can start in a Scala project:&#xA;import&amp;nbsp;java.io._;&#xA;import&amp;nbsp;org.apache.catalina._;&#xA;import&amp;nbsp;org.apache.catalina.startup._;&#xA;object&amp;nbsp;TomcatScalaServer&amp;nbsp;{&#xA;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;val&amp;nbsp;CATALINAHOME&amp;nbsp;:&amp;nbsp;File&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File(&amp;#34;../newsbeef.com&amp;#34;);&#xA;&amp;nbsp;&amp;nbsp;val&amp;nbsp;WEBAPPS&amp;nbsp;:&amp;nbsp;File&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File(CATALINAHOME,&amp;#34;webapps&amp;#34;);&#xA;&amp;nbsp;&amp;nbsp;val&amp;nbsp;ROOT&amp;nbsp;:&amp;nbsp;File&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File(CATALINAHOME,&amp;#34;web&amp;#34;);&#xA;&amp;nbsp;&amp;nbsp;val&amp;nbsp;HOSTNAME&amp;nbsp;:&amp;nbsp;String&amp;nbsp;=&amp;nbsp;&amp;#34;localhost&amp;#34;;&#xA;&amp;nbsp;&amp;nbsp;val&amp;nbsp;PORT&amp;nbsp;:&amp;nbsp;int&amp;nbsp;=&amp;nbsp;8080;&#xA;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;def&amp;nbsp;await()&amp;nbsp;{&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while(&amp;nbsp;true&amp;nbsp;)&amp;nbsp;{&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;#34;sleeping&amp;nbsp;100s&amp;#34;);&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(&amp;nbsp;100000&amp;nbsp;);&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;{&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case&amp;nbsp;ie&amp;nbsp;:&amp;nbsp;InterruptedException&amp;nbsp;=&amp;gt;;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xA;&amp;nbsp;&amp;nbsp;}&#xA;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;def&amp;nbsp;start()&amp;nbsp;{&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;val&amp;nbsp;server&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Embedded();&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;server.setCatalinaHome(CATALINAHOME.getAbsolutePath());&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;val&amp;nbsp;engine&amp;nbsp;=&amp;nbsp;server.createEngine();&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;engine.setDefaultHost(HOSTNAME);&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;val&amp;nbsp;host&amp;nbsp;=&amp;nbsp;server.createHost(HOSTNAME,&amp;nbsp;WEBAPPS.getAbsolutePath());&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;engine.addChild(host);&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;val&amp;nbsp;context&amp;nbsp;=&amp;nbsp;server.createContext(&amp;#34;&amp;#34;,&amp;nbsp;ROOT.getAbsolutePath());&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;context.setParentClassLoader(Thread.currentThread().getContextClassLoader());</description>
    </item>
    <item>
      <title>Spring Web Services, Finally!</title>
      <link>https://chasethedevil.github.io/post/spring-web-services-finally/</link>
      <pubDate>Thu, 23 Aug 2007 11:22:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/spring-web-services-finally/</guid>
      <description>Spring Web Services seems to be the technology I have been looking for recently. I am not a Spring bigot (too XML oriented), but here the Spring folks have something right.&#xA;I used to work with Web Services the simple way: create a java class (or EJB), expose it as Web Service through Axis or RAD, generating the WSDL in the process. And then a client would just be the reverse, take the WSDL, use a tool (Axis or RAD) that creates client Java classes from it automatically.</description>
    </item>
    <item>
      <title>Original Pattern: ServletRequest in ThreadLocal</title>
      <link>https://chasethedevil.github.io/post/original-pattern-servletrequest-in-threadlocal/</link>
      <pubDate>Thu, 02 Aug 2007 12:07:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/original-pattern-servletrequest-in-threadlocal/</guid>
      <description>After seeing Scala had elements of Erlang through Actors, I decided to take a closer look at the language. There is an interesting new web framework in Scala, called Lift. One drawback of Lift is that it seems to be very cutting edge and not that easy to grasp. While reading its source code, I stumbled upon a strange pattern: Storing the ServletRequest in a ThreadLocal.&#xA;I had not seen that before, and was wondering why one would do such a thing.</description>
    </item>
    <item>
      <title>Why Eclipse Is Better</title>
      <link>https://chasethedevil.github.io/post/why-eclipse-is-better/</link>
      <pubDate>Fri, 27 Jul 2007 14:37:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/why-eclipse-is-better/</guid>
      <description>Initially I adopted Eclipse instead of Emacs because it was more powerful to search code, and it allowed refactoring. I regularly tried other IDEs but always end up back to Eclipse, even though there has been less big improvements in Eclipse in the past years (but lots of small ones).&#xA;I just saw today that Eclipse allowed programmatic refactoring. Now that&amp;rsquo;s something quite amazing, and I don&amp;rsquo;t think other IDEs do that yet.</description>
    </item>
    <item>
      <title>Tapestry5 vs Wicket: 1 - 0</title>
      <link>https://chasethedevil.github.io/post/tapestry5-vs-wicket-1---0/</link>
      <pubDate>Wed, 11 Jul 2007 12:49:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/tapestry5-vs-wicket-1---0/</guid>
      <description>Getting started with Tapestry 5 is easier than with Wicket 1.3. Some readers will complain that it is again the view of someone who has no deep knowledge of either Tapestry or Wicket. But I think it is important for projects to be easily accessible to developers. Wicket seems to have more buzz around these days, and has a detailed wiki with plenty of useful information in it. But that&amp;#39;s the problem I see with Wicket, it is not simple to do simple things, that is why there is so much information to do simple things in the Wicket wiki.</description>
    </item>
    <item>
      <title>NetBeans 6.0M10 out without announcement yet!</title>
      <link>https://chasethedevil.github.io/post/netbeans-6.0m10-out-without-announcement-yet/</link>
      <pubDate>Sat, 30 Jun 2007 07:15:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/netbeans-6.0m10-out-without-announcement-yet/</guid>
      <description>I just found it while browsing netbeans website, here is the link. Netbeans is starting to be much more interesting that it used to be before 5.5, even though shortcuts are a pain, because so different from most other editors, and not always defined for important tasks. I like the all integrated feeling without plugin and slugishness by default.</description>
    </item>
    <item>
      <title>Use ORM For Better Performance</title>
      <link>https://chasethedevil.github.io/post/use-orm-for-better-performance/</link>
      <pubDate>Tue, 12 Jun 2007 12:59:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/use-orm-for-better-performance/</guid>
      <description>This is not something I would have though a few years ago. It is something I learnt after working on many different projects, some using an ORM layer like Hibernate, Entity EJBs, or JDO, some using JDBC approach via Spring Templates or custom frameworks. Many projects that use ORM have performance problems, that don&amp;#39;t seem that common with projects using JDBC. But the size of the database model of ORM projects is often much bigger than the one of JDBC projects (which actually makes sense).</description>
    </item>
    <item>
      <title>People Using Spring, EJBs Don&#39;t Know Basic JDBC</title>
      <link>https://chasethedevil.github.io/post/people-using-spring-ejbs-dont-know-basic-jdbc/</link>
      <pubDate>Wed, 30 May 2007 12:03:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/people-using-spring-ejbs-dont-know-basic-jdbc/</guid>
      <description>I recently found a bug in software we are developing. I traced it and found the root was improper JDBC handling. The application is written using EJBs, Spring and plenty of other relatively complex technologies. I was surprised that developers who were able to use all those technologies had no understanding of basic JDBC.&#xA;They fetched all the data (including double, decimal numbers) from the database as String using rs.getString() !</description>
    </item>
    <item>
      <title>Wizards Bad For Productivity</title>
      <link>https://chasethedevil.github.io/post/wizards-bad-for-productivity/</link>
      <pubDate>Wed, 16 May 2007 14:56:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/wizards-bad-for-productivity/</guid>
      <description>IBM RAD comes with many wizards, to create EJBs, to create Web Services, do struts mapping&amp;hellip; They are quite well done, making EJB &amp;lt; 3.0 usable, and Web Services look simple.&#xA;But wizards sucks at:&#xA;typos correction repetition But when you do a typo in your wizards, then all the files generated/changed are wrong, and you don&amp;rsquo;t necessarily know if you can just do a search and replace. Plus you don&amp;rsquo;t necessarily know all the files that were affected by the typo.</description>
    </item>
    <item>
      <title>Less Productive With Maven2.</title>
      <link>https://chasethedevil.github.io/post/less-productive-with-maven2./</link>
      <pubDate>Sun, 29 Apr 2007 17:10:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/less-productive-with-maven2./</guid>
      <description>My first trials of Maven were failures. As I am stubborn, I tried again, on a new project, a quite simple one. It works, but it makes some easy things overkill. And the default way of using it makes a developer lose lots of time.&#xA;If I have a project with common classes, a standalone app, and a web app, then logically you do 3 projects, 2 of them depending on the common one.</description>
    </item>
    <item>
      <title>Java Concurrency In Practice Book Review</title>
      <link>https://chasethedevil.github.io/post/java-concurrency-in-practice-book-review/</link>
      <pubDate>Wed, 14 Feb 2007 16:33:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-concurrency-in-practice-book-review/</guid>
      <description>My reference book on Java concurrency is Doug Lea&amp;#39;s Concurrent Programming in Java: Design Principles and Patterns. He is one of the authors of this new book, Java Concurrency In Practice. There is also Joshua Bloch, author of Effective Java, that many people love (but I am less a fan of it, even if I would recommend it to Java newbies), and author of Java Puzzlers, that I found more fun.</description>
    </item>
    <item>
      <title>Why are you not using Entity EJB 1.1?</title>
      <link>https://chasethedevil.github.io/post/why-are-you-not-using-entity-ejb-1.1/</link>
      <pubDate>Wed, 07 Feb 2007 16:38:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/why-are-you-not-using-entity-ejb-1.1/</guid>
      <description>I am currently quite busy learning about Websphere Commerce. I was surprised to notice that they still use Entity EJBs 1.1. My experience was that many companies turned away from Entity EJBs, sometimes from the beginning, preferring TopLink or Hibernate (later).&#xA;I know that Entity EJBs are more heavy to use than Hibernate, but with the proper tooling support, it&amp;rsquo;s not really a big issue. Are there more fundamental reasons? There are probably some mapping limitations, but IBM implementation is apparently quite good in term of features.</description>
    </item>
    <item>
      <title>Social (Web) Revelation: Tags Are Lame</title>
      <link>https://chasethedevil.github.io/post/social-web-revelation-tags-are-lame/</link>
      <pubDate>Tue, 16 Jan 2007 10:26:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/social-web-revelation-tags-are-lame/</guid>
      <description>I had a revelation yesterday while thinking about del.icio.us, the most well known social bookmarks site. I find out that I almost never use my tags, and I am often not satisfied by results when I search using tags. What use can you make of 100s of tags? in the end only less than 10 are usable to classify very different stuff. And even then compared to a search it&amp;rsquo;s not a much useful classification.</description>
    </item>
    <item>
      <title>1 year of mac mini - the deception point</title>
      <link>https://chasethedevil.github.io/post/1-year-of-mac-mini---the-deception-point/</link>
      <pubDate>Mon, 08 Jan 2007 15:56:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/1-year-of-mac-mini---the-deception-point/</guid>
      <description>I am less enthusiastic about the Apple experience than I was one year ago. I am quite enthusiastic with the hardware in general, except the keyboard. The computer is small and quiet, and there are not many competitors at this price on the market.&#xA;Experience as a developer&#xA;I feel frustrated with MacOs X as a development environment, when compared with Ubuntu Linux. I always miss the multiple desktop, despite expose magnificient look.</description>
    </item>
    <item>
      <title>Tired Of Bad Singletons</title>
      <link>https://chasethedevil.github.io/post/tired-of-bad-singletons/</link>
      <pubDate>Thu, 04 Jan 2007 11:50:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/tired-of-bad-singletons/</guid>
      <description>While looking through some code for a project, I saw that:&#xA;&amp;nbsp; public static final ProductYP instance = new ProductYP(); &amp;nbsp; &amp;nbsp; public ProductYP()&#xA;&amp;nbsp; {&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (instance != null)&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new RuntimeException(&amp;quot;Only one instance allowed&amp;quot;);&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; prods = new HashMap();&#xA;&amp;nbsp; }&#xA;&amp;nbsp; public static ProductYP getInstance() &amp;nbsp; {&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; return instance;&#xA;&amp;nbsp; }&#xA;And I don&amp;#39;t think it was done by a newbie... It&amp;#39;s actually not far from being correct, it&amp;#39;s just that the guy obviously does not know about private constructors.</description>
    </item>
    <item>
      <title>Declaring Your Logger - No Problem</title>
      <link>https://chasethedevil.github.io/post/declaring-your-logger---no-problem/</link>
      <pubDate>Fri, 29 Dec 2006 11:45:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/declaring-your-logger---no-problem/</guid>
      <description>I used to like the java specialists newsletter, most news used to be a bit challenging. Nowadays however the quality is lower. In the latest news, the author proposes to use the StackTrace to get the class name, in order to declare a Logger independently of any explicit reference to the class name.&#xA;While this is a clever hack, it still requires some code to be duplicated in every class, compared to Aspect/IoC approach.</description>
    </item>
    <item>
      <title>Very Quick Django Trial -&gt; Bye Bye Django</title>
      <link>https://chasethedevil.github.io/post/very-quick-django-trial---bye-bye-django/</link>
      <pubDate>Thu, 21 Dec 2006 17:48:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/very-quick-django-trial---bye-bye-django/</guid>
      <description>I tried a bit django for one very simple thing, where django is not of much use, but it was a way to try it with something else than examples on the site. Even if django templates features seem very good and very convenient when reading the docs (for example the extends keyword), I found out that the template system is very annoying. Firstly one has to learn another templating system.</description>
    </item>
    <item>
      <title>A Proof That JavaScript Sucks.</title>
      <link>https://chasethedevil.github.io/post/a-proof-that-javascript-sucks./</link>
      <pubDate>Fri, 15 Dec 2006 16:51:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/a-proof-that-javascript-sucks./</guid>
      <description>Google developed GWT.&#xA;Why would GWT be so well acclaimed if JavaScript was a good language. When you talk about GWT to someone (a developer preferably), the first reaction is often&#xA;great I don&amp;rsquo;t need to do any JavaScript&#xA;I recently discovered another similar open source project, ZK. The first thing you can read on the website is&#xA;ZK is an open source Ajax Web framework that enables rich user interface for web applications with no JavaScript and little programming.</description>
    </item>
    <item>
      <title>Building With Ant &#43; Maven Antlib?</title>
      <link>https://chasethedevil.github.io/post/building-with-ant--maven-antlib/</link>
      <pubDate>Thu, 14 Dec 2006 10:51:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/building-with-ant--maven-antlib/</guid>
      <description>I discovered a new baby in the build world. Some open source projects use a combination of ant and maven. I thought you could vaguely use ant from maven. But I did not know of Maven Antlib that allows you to use maven2 from Ant. Why would you use Maven2 from Ant?&#xA;because Maven2 requires to adapt your project to its standard hierarchy, or to have excellent Maven2 skills to create your own archetype for each existing project.</description>
    </item>
    <item>
      <title>The Hibernate Network Proxy, A Dumb Idea.</title>
      <link>https://chasethedevil.github.io/post/the-hibernate-network-proxy-a-dumb-idea./</link>
      <pubDate>Mon, 04 Dec 2006 14:41:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/the-hibernate-network-proxy-a-dumb-idea./</guid>
      <description>A friend of mine had a good idea for a Java project named &amp;ldquo;hibernate proxy&amp;rdquo;. I renamed it &amp;ldquo;hibernate network proxy&amp;rdquo; because hibernate proxies are already a well known concept among hibernate users (it allows lazy loading through a Java Proxy class).&#xA;The hibernate network proxy, is a way to use hibernate remotely, that is to proxy hibernate calls through TCP (or even HTTP) to another machine, that will execute the session.</description>
    </item>
    <item>
      <title>Workaround When Eclipse Fucks Off With CVS</title>
      <link>https://chasethedevil.github.io/post/workaround-when-eclipse-fucks-off-with-cvs/</link>
      <pubDate>Tue, 28 Nov 2006 11:42:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/workaround-when-eclipse-fucks-off-with-cvs/</guid>
      <description>Until recently, I always found Eclipse CVS support to be excellent. The synchronize view was really a big plus to do clean commits, without forgetting any file.&#xA;But I have encountered several problem with Eclipse 3.2+:&#xA;On one project, it keeps putting the build directory into CVS, and I can&#39;t find how to change that setting. Each time I open the project I have to change the CVS/Entries file.</description>
    </item>
    <item>
      <title>Maven: Game Over, Try Again</title>
      <link>https://chasethedevil.github.io/post/maven-game-over-try-again/</link>
      <pubDate>Fri, 24 Nov 2006 17:51:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/maven-game-over-try-again/</guid>
      <description>I am writing only as a newbie on Maven2. I tried to use it several times on small projects, but each time I found out that the time involved to make it work with an existing project was too much a pain in the a**. When confronted to very simple hierarchies that are not the standard of the documentation, I was a bit lost on how to arrange things, except changing the whole hierarchy to adapt to Maven.</description>
    </item>
    <item>
      <title>How JDepend Changed My Java Packaging</title>
      <link>https://chasethedevil.github.io/post/how-jdepend-changed-my-java-packaging/</link>
      <pubDate>Fri, 13 Oct 2006 09:27:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/how-jdepend-changed-my-java-packaging/</guid>
      <description>One important feature of Java language is the package keyword. It helps a lot in modularizing your code. But how exactly one should use it is not that clear.&#xA;I have been on projects where 100s of classes are in a same package and more often where you have packages for every 2 classes. Often, packages are chosen so as to split functionalities. But often as well, people are packages maniacs and create way too many of them, because they want to sort things out, not necessarily applying a consistent logic.</description>
    </item>
    <item>
      <title>You Know IOException? Think Again!</title>
      <link>https://chasethedevil.github.io/post/you-know-ioexception-think-again/</link>
      <pubDate>Thu, 14 Sep 2006 10:59:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/you-know-ioexception-think-again/</guid>
      <description>I was amazed today to find out that there was no constructor IOException(String, Throwable) or IOException(Throwable) in JDK1.4 and JDK1.5. It is finally in JDK1.6, I can&amp;rsquo;t believe it took Sun that much time to change that.&#xA;So the workaround is:&#xA;`IOException ioe = new IOException(&amp;quot;message&amp;quot;);` `ioe.initCause(e);` `throw ioe;` It can also be written as:&#xA;`throw (IOException) new IOException(&amp;quot;message&amp;quot;).initCause(e);` It is not a major problem, but still. We can all thank the guy who reported that as a bug to Sun in 2004.</description>
    </item>
    <item>
      <title>Good Software Books - 2006 version</title>
      <link>https://chasethedevil.github.io/post/good-software-books---2006-version/</link>
      <pubDate>Mon, 11 Sep 2006 14:27:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/good-software-books---2006-version/</guid>
      <description>Here is an update of the most interesting software books I found interesting. I already made such a list in 2005:&#xA;Object Oriented Software Construction, 2nd Ed, by Bertrand Meyer. This made me understand why OOP is important, what is important in OOP and why it is still relevant. It contains lots of important guidelines you can apply to better design programs. One famous quote is &#34;Real systems have no top&#34;</description>
    </item>
    <item>
      <title>I Get Spring</title>
      <link>https://chasethedevil.github.io/post/i-get-spring/</link>
      <pubDate>Wed, 23 Aug 2006 18:04:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/i-get-spring/</guid>
      <description>When you google up Java Spring, one of the best results is a post from crazybob called &amp;ldquo;I Don&amp;rsquo;t Get Spring&amp;rdquo;. For a long time, I shared a similar opinion. But now that I have used it, I get it. I only use it for defining replaceable services, so when I talk about Spring, I mean spring-core and spring-beans.&#xA;These two packages are not big, and have only very few dependencies.</description>
    </item>
    <item>
      <title>Java Serialization vs .NET Serialization - Java Perverse?</title>
      <link>https://chasethedevil.github.io/post/java-serialization-vs-.net-serialization---java-perverse/</link>
      <pubDate>Tue, 22 Aug 2006 12:55:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-serialization-vs-.net-serialization---java-perverse/</guid>
      <description>Did you know what happens in Java when you serialize a subclass of a non serializable class? I was surprised by the answer: it works!&#xA;Unfortunately it is not a good thing, because it will serialize fields from your subclass and no fields from the parent class. So you&#39;ll end up with a half serialized instance.&#xA;In .NET, it breaks at runtime, throwing an exception, which is I think, much more logical, because then you don&#39;t end up with half data somewhere.</description>
    </item>
    <item>
      <title>5 Minutes of Google Spreadsheets</title>
      <link>https://chasethedevil.github.io/post/5-minutes-of-google-spreadsheets/</link>
      <pubDate>Thu, 17 Aug 2006 12:10:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/5-minutes-of-google-spreadsheets/</guid>
      <description>Today I noticed a Google Spreadsheets link in my gmail screen. I had read about it but never bothered to try before. In the finance industry, a lot of traders use excel, so I was wondering if Google spreadsheets could be another fit.&#xA;Unfortunately for Google, under Linux at least, I don&amp;rsquo;t find Google Spreadsheets usable for anything else than storing and sharing some information, not often updated. Although I admire the engineers that managed to write the Javascript behind Google Spreasheet, it is way too slow for using it in interesting ways.</description>
    </item>
    <item>
      <title>Procedural Programming in an OO language</title>
      <link>https://chasethedevil.github.io/post/procedural-programming-in-an-oo-language/</link>
      <pubDate>Tue, 08 Aug 2006 12:35:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/procedural-programming-in-an-oo-language/</guid>
      <description>OO is an old buzzword, that is not required anymore to get an employment. Recruiter seems to prefer SOA, Web Services, and in France, &amp;ldquo;mutualisation&amp;rdquo; and &amp;ldquo;urbanisation&amp;rdquo;. Sometimes I really wonder if OO made it.&#xA;I am sure many of you are confronted with programmers that love procedural programming in many of your projects. They might use an OO language but in the end will organize everything by &amp;ldquo;type&amp;rdquo;, split invariably state and logic.</description>
    </item>
    <item>
      <title>Back To Real Java, Bye Bye J2EE</title>
      <link>https://chasethedevil.github.io/post/back-to-real-java-bye-bye-j2ee/</link>
      <pubDate>Wed, 26 Jul 2006 16:26:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/back-to-real-java-bye-bye-j2ee/</guid>
      <description>I changed job recently. In this new job, it is refreshing to see Java used like in the old days, without the J2EE layers, and without the extra IBM layers of my previous job. Granted, the fresh Java approach does not apply to many projects, because a lot of apps are just about interfacing a database with a web interface. But Spring success showed that even for many of those projects, fresh Java approach with a small framework is enough.</description>
    </item>
    <item>
      <title>Moving weekly Javablog stats to a new blog</title>
      <link>https://chasethedevil.github.io/post/moving-weekly-javablog-stats-to-a-new-blog/</link>
      <pubDate>Mon, 26 Jun 2006 17:25:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/moving-weekly-javablog-stats-to-a-new-blog/</guid>
      <description>Javablogs.com top 10 weekly/monthly/yearly entries were starting to pollute my blog too much for my taste. It is more appropriate to dedicate a blog to them. That is what I should have done in the first place as it is very easy to have many blogs with blogger.com.&#xA;So you&amp;rsquo;ll find at javabuzz.blogspot.com the weekly top 10 most read entries on Javablogs, and sometimes more.</description>
    </item>
    <item>
      <title>JSF Was Too Hard for Experienced Developers</title>
      <link>https://chasethedevil.github.io/post/jsf-was-too-hard-for-experienced-developers/</link>
      <pubDate>Fri, 23 Jun 2006 14:59:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/jsf-was-too-hard-for-experienced-developers/</guid>
      <description>While starting to look into Seam, I noticed that all examples use JSF for the view, and there is no alternative to it. If someone like Gavin (from Hibernate fame) thinks JSF is usable, then I probably overlooked something when I looked into it a few years ago, when JSF was the craze of the moment.&#xA;At the beginning, JSF looks very similar to ASP.NET. But I have a small experience with ASP.</description>
    </item>
    <item>
      <title>Top 10 Most Read Last Week On Javablogs.com, Week 24</title>
      <link>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-24/</link>
      <pubDate>Mon, 19 Jun 2006 13:05:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-24/</guid>
      <description>Most read last week&#xA;Sexiest photo ever (235): Heading off to Nerja (on the advice of Joe who will pay dearly if the ratio of fish &#39;n chip shops to tapas bars isn&#39;t on the right side of 95:05) for 2 weeks with 3 lovely girls and a... [read] You are not a ‘real’ Java developer until… (217): You had to use JDK 1.3 on a real project. In 2006.</description>
    </item>
    <item>
      <title>On EJB Restrictions - Can You Open a Socket?</title>
      <link>https://chasethedevil.github.io/post/on-ejb-restrictions---can-you-open-a-socket/</link>
      <pubDate>Mon, 19 Jun 2006 11:48:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/on-ejb-restrictions---can-you-open-a-socket/</guid>
      <description>During job interviews, one of the frequent questions is&#xA;&amp;ldquo;What restrictions are imposed on EJBs?&amp;rdquo;.&#xA;I had a chat recently with someone about it, and we still don&amp;rsquo;t agree on the answer.&#xA;He believes we can&amp;rsquo;t open sockets, while I believe it is perfectly allowed, if you don&amp;rsquo;t retain the socket connection between method calls. His arguments are based on an analogy with files. After all in Linux, files are sockets.</description>
    </item>
    <item>
      <title>Top 10 Most Read Last Week On Javablogs.com, Week 23</title>
      <link>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-23/</link>
      <pubDate>Mon, 12 Jun 2006 16:37:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-23/</guid>
      <description>Most read last week&#xA;The Top 10 Java Killer Apps (357): Some VERY cool apps that have created, or are creating, quite a buzz not only in the Java world but in the larger populace. I’ve used most of the apps below, although I have yet to try a few. [read] Google hits a home run with Google Spreadsheet (290): I just got my invite to play with the latest offering from Google, the Google Spreadsheets and my initial reaction after playing with it for the past hour is incredibly positive.</description>
    </item>
    <item>
      <title>Non Blocking with Traditional Java IO - On the Use of InputStream.available() and Thread.sleep()</title>
      <link>https://chasethedevil.github.io/post/non-blocking-with-traditional-java-io---on-the-use-of-inputstream.available-and-thread.sleep/</link>
      <pubDate>Thu, 08 Jun 2006 16:31:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/non-blocking-with-traditional-java-io---on-the-use-of-inputstream.available-and-thread.sleep/</guid>
      <description>Some time ago I did quite a lot of IO in Java and I yet did not see this way of reading a InputStream from a Socket:&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStream&amp;nbsp;in=channel.getInputStream();&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.connect();&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[]&amp;nbsp;tmp=new&amp;nbsp;byte[1024];&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while(true){&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while(in.available()&amp;gt;0){&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;i=in.read(tmp,&amp;nbsp;0,&amp;nbsp;1024);&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(i&amp;lt;0)break;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(new&amp;nbsp;String(tmp,&amp;nbsp;0,&amp;nbsp;i));&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(channel.isClosed()){&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;#34;exit-status:&amp;nbsp;&amp;#34;+channel.getExitStatus());&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try{Thread.sleep(1000);}catch(Exception&amp;nbsp;ee){}&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.disconnect(); This comes from a piece of code from an example of JSch , a good ssh client in java. A work collegue had the bad idea to remove the Thread.</description>
    </item>
    <item>
      <title>Top 10 Most Read Last Week On Javablogs.com, Week 22</title>
      <link>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-22/</link>
      <pubDate>Mon, 05 Jun 2006 14:07:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-22/</guid>
      <description>Most read last week&#xA;Why I&#39;m leaving Sun and... what next? (304): Leaving Sun is possibly one of the most difficult decisions I&#39;ve ever made. But I think it&#39;s time for me to start new things and, well, it&#39;s also time for Sun to start new things. [read] 9 new and *noteworthy* features in Eclipse 3.2 (280): Chris Laffra has put a big presentation of all the new and noteworthy features that are coming in the Eclipse 3.</description>
    </item>
    <item>
      <title>Is Java Flawed - a big advantage of Python/Ruby/(your favorite interpreted language)</title>
      <link>https://chasethedevil.github.io/post/is-java-flawed---a-big-advantage-of-pythonrubyyour-favorite-interpreted-language/</link>
      <pubDate>Fri, 02 Jun 2006 17:33:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/is-java-flawed---a-big-advantage-of-pythonrubyyour-favorite-interpreted-language/</guid>
      <description>Java is supposed to be much better to build big projects, because of static type checking, and all the rigour around the language. But how many of you have seen medium sized projects taking more than 30 minutes to build.&#xA;At work, they have a standard J2EE project, with only about 50 EJBs, hundreds of JDO classes, and standard classes. Between the JDO generation, EJB generation, EJB dependencies calculations, and packaging, it takes 20 minutes.</description>
    </item>
    <item>
      <title>Using Linux to Recover Fucked Up Windows Data</title>
      <link>https://chasethedevil.github.io/post/using-linux-to-recover-fucked-up-windows-data/</link>
      <pubDate>Thu, 01 Jun 2006 01:52:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/using-linux-to-recover-fucked-up-windows-data/</guid>
      <description>Recently, one of my relatives computer under Windows XP, refused to boot. There was no way of fixing it with Windows Install CD as partition table seemed corrupt to Windows. I tried everything in an 2003 Ultimate Boot CD, but nothing worked out.&#xA;Someone gave me an install cd of Ubuntu Linux, and it managed to read the data. Well sometimes only. The erratic behaviour was due to a bad ATA cable.</description>
    </item>
    <item>
      <title>Java HTML Parsing Example With htmlparser</title>
      <link>https://chasethedevil.github.io/post/java-html-parsing-example-with-htmlparser/</link>
      <pubDate>Tue, 30 May 2006 11:02:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-html-parsing-example-with-htmlparser/</guid>
      <description>Every week, I post javablogs top 10 most read blog entries on this blog. The reason for it was that I don&#39;t look at what&#39;s happening on the week-end and this will pickup interesting stories from the weekend, and I also don&#39;t watch javablogs everyday. Overall I find it quite good to be uptodate with interesting stuff happening on javablogs.&#xA;As mentionned in an earlier post my library of choice to do the parsing is htmlparser (on sourceforge) because it&#39;s free, open source and because I am lazy and did not want to do my own.</description>
    </item>
    <item>
      <title>Top 10 Most Read Last Week On Javablogs.com, Week 21</title>
      <link>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-21/</link>
      <pubDate>Tue, 30 May 2006 10:12:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-21/</guid>
      <description>Most read last week Spring vs JBoss, and why I don’t care about Sun standards (272): After a long time, it was interesting to see the Spring and JBoss folks engage in a public war of words, in comments on Matt Raible’s blog. [read] Kent Beck: &#34;We thought we were just programming on an airplane&#34; (231): JUnit co-creator Kent Beck says a number of things convinced he and Erich Gamma to create a new revision of JUnit after a long hiatus, including TestNG and Java 5.</description>
    </item>
    <item>
      <title>Top 10 Most Read Last Week On Javablogs.com, Week 20</title>
      <link>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-20/</link>
      <pubDate>Mon, 22 May 2006 16:17:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-20/</guid>
      <description>Most read last week&#xA;The Worst Java Job Interview Questions. (269): Why are you looking for a job? Strictly speaking, this is not a java question, but it shows up in almost every job interview I&#39;ve been to. [read] Goodbye Ant , Welcome Maven 2 (219): After years of using Ant for building my applications, I have moved to something different, Apache Maven 2. And now it seems there is no looking back.</description>
    </item>
    <item>
      <title>Top 10 Most Read Last Week On Javablogs.com, Week 19</title>
      <link>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-19/</link>
      <pubDate>Tue, 16 May 2006 10:29:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/top-10-most-read-last-week-on-javablogs.com-week-19/</guid>
      <description>Most read last week&#xA;Axis2: Why bother? (257): The Axis team is kicking up a big fuss about their recent release of Axis 2 (1.0!) Surprisingly, this library is so so abysmally bad, [read] Google trends proves: Java is doomed (251): Google trends is a nice idea, and I had to apply it adhoc to Java, Ruby, Python and C#. Interesting results, I can see a decline in Java! [read] Rich Open Source Webmail that doesn&#39;t suck (219): Guys.</description>
    </item>
    <item>
      <title>First Steps With EhCache</title>
      <link>https://chasethedevil.github.io/post/first-steps-with-ehcache/</link>
      <pubDate>Thu, 04 May 2006 18:10:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/first-steps-with-ehcache/</guid>
      <description>If you need to cache objects in your system, Ehcache is a simple cache written in Java, widely used and well tested. I will present here a short tutorial on how to use EhCache for people who don&#39;t want to look around the documentation at first, but just want to test if it works in their project and to see how easy it is to setup. Installation Download Ehcache from the Download link on http://ehcache.</description>
    </item>
    <item>
      <title>Null vs. Errors</title>
      <link>https://chasethedevil.github.io/post/null-vs.-errors/</link>
      <pubDate>Wed, 26 Apr 2006 16:16:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/null-vs.-errors/</guid>
      <description>I am not particularly a fan of&amp;nbsp; JCS (Jakarta Cache System) as I find ehcache code very clean and simple. But I have to say the author has some good comments on the site: &amp;nbsp; Nulls vs. Errors &amp;nbsp; I started to support ObjectNotFoundExceptions for failed gets but the overhead and cumbersome coding needed to surround a simple get method is ridiculous. Instead the JCS return null. &amp;nbsp; For having seen too many times the ObjectNotFoundException &amp;quot;pattern&amp;quot;, I can only agree!</description>
    </item>
    <item>
      <title>Algorithms in Java (Third Edition) Book Review</title>
      <link>https://chasethedevil.github.io/post/algorithms-in-java-third-edition-book-review/</link>
      <pubDate>Wed, 26 Apr 2006 12:26:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/algorithms-in-java-third-edition-book-review/</guid>
      <description>The book Algorithms in Java is huge, but unlike the usual huge books, the content is very interesting. It can be used as reference material, or as toilet book (to learn things while you&#39;re wasting time in the toilets).&#xA;You will learn simple things, like what is the &#34;raison d&#39;être&#34; of linked lists. The author gives very good examples to illustrate his propositions. He explains through the sieve of erathostene and through Josephus problem the advantages of arrays or linked list.</description>
    </item>
    <item>
      <title>Caching HTTP Responses in Java</title>
      <link>https://chasethedevil.github.io/post/caching-http-responses-in-java/</link>
      <pubDate>Wed, 19 Apr 2006 18:14:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/caching-http-responses-in-java/</guid>
      <description>Caching HTTP response can dramatically improve performance of your app if what you generate is in reality not very dynamic. There are many free caching frameworks in Java. Most popular seem to be ehcache, oscache, jcs and JBoss Cache.&#xA;ehcache is quite simple to use and its code is clean. They have a CachingFilter that you can put in your webapp server to cache transparently HTTP responses. However as the framework only allows you to store Objects (which makes sense for most uses), I was wondering how they cached the HttpResponse which is a stream.</description>
    </item>
    <item>
      <title>Javablogs.com 2005 Top 20</title>
      <link>https://chasethedevil.github.io/post/javablogs.com-2005-top-20/</link>
      <pubDate>Tue, 18 Apr 2006 16:42:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/javablogs.com-2005-top-20/</guid>
      <description>Most read in 2005&#xA;New in Hibernate 3: Criteria API enhancements (816): Projection, aggregation, subselects, detatched criterias - its all there in the Hibernate 3 Criteria API. Let me show you some examples, starting with the new projection API.&amp;hellip; [read] Hello, IDEA! (555): From the recent Java IDE discussions, it seems like there&#39;s a good portion of Java programmers who don&#39;t know IntelliJ IDEA, or simply haven&#39;t tried it yet.</description>
    </item>
    <item>
      <title>How To Use Java With Blogger: A Tutorial</title>
      <link>https://chasethedevil.github.io/post/how-to-use-java-with-blogger-a-tutorial/</link>
      <pubDate>Tue, 18 Apr 2006 16:36:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/how-to-use-java-with-blogger-a-tutorial/</guid>
      <description>Blogger has a REST API. I use it to retrieve particular posts or to post transformed data. There is no Java API that I know of, but you will see here it is not very difficult to interface with Blogger API in Java using plain old XML. Using libraries commons-httpclient and DOM4J it would be quite easy to implement your own Java Blogger API as the following code will suggest.</description>
    </item>
    <item>
      <title>Last week Javablogs.com top 10</title>
      <link>https://chasethedevil.github.io/post/last-week-javablogs.com-top-10/</link>
      <pubDate>Tue, 18 Apr 2006 11:02:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/last-week-javablogs.com-top-10/</guid>
      <description>Most read last week&#xA;Stupid Command Prompt Tricks (289): These Stupid (Windows) Command Prompt Tricks actually look rather useful. [read] The truth about Tudu Lists!! (260): I&#39;ve now been working on Tudu Lists for more than one year, and I&#39;m releasing today version 1.1. With this latest release, it is now time for me to tell the truth about Tudu Lists.&amp;hellip; [read] Toplink vs hibernate (258): I still remember the excitement I felt when I started working on Toplink.</description>
    </item>
    <item>
      <title>Web Services No Better Than CORBA?</title>
      <link>https://chasethedevil.github.io/post/web-services-no-better-than-corba/</link>
      <pubDate>Mon, 10 Apr 2006 15:23:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/web-services-no-better-than-corba/</guid>
      <description>Richard Monson-Haefel (RMH), author of the famous Enterprise Java Beans (O&#39;Reilly) and of a Web Services book is making an alarming claim about JAX-WS, the new Java web services standard: JAX-WS still sucks! &amp;nbsp; In an effort to write a client to real world web services (for Google, Amazon, Ebay), he mostly&amp;nbsp;failed. Errors seem to be largely related to WSDL to Java conversion. Jason Green, a JBoss developer, managed to get quickly a web service working for Ebay, but analysis by RMH suggest that hundreds of classes were generated for this simple one method web service.</description>
    </item>
    <item>
      <title>Is your UML Composition French or American?</title>
      <link>https://chasethedevil.github.io/post/is-your-uml-composition-french-or-american/</link>
      <pubDate>Fri, 07 Apr 2006 11:40:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/is-your-uml-composition-french-or-american/</guid>
      <description>The French Way&#xA;In many French books/lessons (a lesson here, another from caen university , one from UQAM), UML composition does not seem to mean the same as their English counterparts. They write:&#xA;Si l&#39;agrégat est détruit (ou copié), ses composants le sont aussi.or les composants (en tant qu&#39;ils sont composants) ont une durée de vie incluse dans celle de leur composé.&#xA;translated to English:&#xA;If the aggregate is destroyed (or copied), its components are destroyed (or copied) as well.</description>
    </item>
    <item>
      <title>Are UML Aggregation and Composition Good Concepts?</title>
      <link>https://chasethedevil.github.io/post/are-uml-aggregation-and-composition-good-concepts/</link>
      <pubDate>Tue, 04 Apr 2006 11:12:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/are-uml-aggregation-and-composition-good-concepts/</guid>
      <description>Yesterday a work collegue made the remark that the notions of aggregation and composition were not very clear. I was a bit surprised at first. But I actually almost always use just associations relations, sometimes composition, I was not sure anymore about the difference between aggregation and association and the one between composition and aggregation. I had to look up in a book to remember what it was all about.</description>
    </item>
    <item>
      <title>SOA and B. Meyer</title>
      <link>https://chasethedevil.github.io/post/soa-and-b.-meyer/</link>
      <pubDate>Fri, 31 Mar 2006 15:08:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/soa-and-b.-meyer/</guid>
      <description>While rereading parts of Object Oriented Software Construction from B. Meyer, I still find valuable information I overlooked. In the part about functional decomposition where he argues pro and cons of top-down / bottom-up approaches, he has the intuition of the current SOA hype. By showing that&#xA;Real systems have no top.&#xA;He suggests that the only way to build complex software is through a service oriented architecture. Of course SOA is a very old concept.</description>
    </item>
    <item>
      <title>Tired Of &#39;My 10 Best XXX&#39; Blog Posts</title>
      <link>https://chasethedevil.github.io/post/tired-of-my-10-best-xxx-blog-posts/</link>
      <pubDate>Thu, 30 Mar 2006 10:32:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/tired-of-my-10-best-xxx-blog-posts/</guid>
      <description>It&#39;s incredible how many posts on popular aggregators are just about a list of stuff, and how except one word they sound the same.&#xA;Only today on Javaworld, I can read:&#xA;&amp;quot; Ten Things Every Java Developer Should Know About Unix&amp;quot;&#xA;&amp;quot;My 10 Favorite Scripting Languages &amp;quot; &amp;quot;7 Must-Have Programs for Windows&amp;quot;&#xA;They all seem to have read the &amp;quot;10 best ways to have your post popular on delicious&amp;quot;</description>
    </item>
    <item>
      <title>Bilinear Gaussian Lanczos? Downsampling!</title>
      <link>https://chasethedevil.github.io/post/bilinear-gaussian-lanczos-downsampling/</link>
      <pubDate>Fri, 17 Mar 2006 17:32:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/bilinear-gaussian-lanczos-downsampling/</guid>
      <description>Not easy to choose a downsampling algorithm. Some links:&#xA;mplayer: advises bilinear for quality and describes artifacts for each algo a blogger: advises lanczos. This links shows pictures produced by each algo.&#xA;digital image interpolation: seems to have a preference for bicubic, what photoshop uses. videohelp: tested various algorithms and think Bicubic spline is the best.People don&#39;t seem to agree. If you want to check the theory: wikipedia lanczos</description>
    </item>
    <item>
      <title>Getting Started With DOM, XOM, DOM4J by Parsing an RSS Feed - An Experience Review</title>
      <link>https://chasethedevil.github.io/post/getting-started-with-dom-xom-dom4j-by-parsing-an-rss-feed---an-experience-review/</link>
      <pubDate>Fri, 17 Mar 2006 10:53:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/getting-started-with-dom-xom-dom4j-by-parsing-an-rss-feed---an-experience-review/</guid>
      <description>Recently, I looked for a way to get info from some particular blog entries of mine on blogger.com. Blogger used to offer an XML-RPC API . They even designed a version 2 of the XML-RPC API that does not seem to have ever been put in production. Or maybe I did not manage to make it work. I had no problem to make v1 work, however. I used apache XMLRPC v2, it was very simple to use.</description>
    </item>
    <item>
      <title>Bad JDK Design Example</title>
      <link>https://chasethedevil.github.io/post/bad-jdk-design-example/</link>
      <pubDate>Thu, 16 Mar 2006 15:02:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/bad-jdk-design-example/</guid>
      <description>Have you ever used the Authenticator class? It is standard since JDK 1.2. This allows you to establish authenticated HTTP requests. OnJava has an in-depth article presenting it. Now here is my story about it.The other day I just wanted to do that a simple authenticated HTTP request. You would expect it to be very simple to do in the modern internet world. It is actually not very difficult to do, by hand, a JavaWorld article presents this way.</description>
    </item>
    <item>
      <title>Current Popular Subjects In Java Blogs</title>
      <link>https://chasethedevil.github.io/post/current-popular-subjects-in-java-blogs/</link>
      <pubDate>Wed, 15 Mar 2006 20:00:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/current-popular-subjects-in-java-blogs/</guid>
      <description>Based on my blogs entries and success of other blog entries, I present the current trendy subjects and the not trendy ones:&#xA;In:&#xA;Design Patterns Ruby on Rails EJB (bashing) RSS Spring Hibernate Javascript and AJAX Java Virtual Machine Out:&#xA;RMI Portal Jini Neutral&#xA;JDK 5 features As you can see most of the popular stuff is fairly common, not that new. I will do a finer, less common, analysis later if I have time.</description>
    </item>
    <item>
      <title>Non Fiction Books (Mostly Software Programming) Before 2003</title>
      <link>https://chasethedevil.github.io/post/non-fiction-books-mostly-software-programming-before-2003/</link>
      <pubDate>Wed, 15 Mar 2006 15:03:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/non-fiction-books-mostly-software-programming-before-2003/</guid>
      <description>A page with useful reference for me as I don&#39;t own each one of these books. It can provides you a very short review non-commercial biased.&#xA;2003&#xA;Programming Jakarta Struts (O&#39;Reilly - Chuck Cavaness) much better than Manning book. Explains struts very clearly with a more interesting example. Not enough on how to design your application for use with the evil ActionForm. Almost nothing on Struts 1.1 features. Nothing on common problems encountered while building web applications, or even about on how to design them using struts.</description>
    </item>
    <item>
      <title>How Mac Os X Made Me Discover a Bug in my Java Prog</title>
      <link>https://chasethedevil.github.io/post/how-mac-os-x-made-me-discover-a-bug-in-my-java-prog/</link>
      <pubDate>Tue, 14 Mar 2006 20:15:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/how-mac-os-x-made-me-discover-a-bug-in-my-java-prog/</guid>
      <description>Yesterday I had some free time to finally find out why MacOs X would not display my little applet properly. I checked various JDKs for MacOs, no difference. I checked if it was due to antialiasing use, no luck. I actually found out there was an error in the way I displayed images. I did not call repaint() between each image change. Strangely, it worked fine on Windows with many JDKs.</description>
    </item>
    <item>
      <title>Del.icio.us Firefox Toolbar Update</title>
      <link>https://chasethedevil.github.io/post/del.icio.us-firefox-toolbar-update/</link>
      <pubDate>Mon, 13 Mar 2006 19:45:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/del.icio.us-firefox-toolbar-update/</guid>
      <description>I updated my little delicious toolbar that provides autosave feature for me. I did not bother reworking the new delicious extension as I don&#39;t use its new functionalities. However people are free to do so if they want with the code from this toolbar.&#xA;With Firefox 1.5, display of saved documents was not working properly anymore due to a change in Firefox handling of security permissions to view local files.</description>
    </item>
    <item>
      <title>Why did Netscape choose Javascript?!?</title>
      <link>https://chasethedevil.github.io/post/why-did-netscape-choose-javascript/</link>
      <pubDate>Thu, 09 Mar 2006 17:10:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/why-did-netscape-choose-javascript/</guid>
      <description>Last year, I have helped building an AJAX web application, where the web client was composed of only one web page and tons of javascript. The 1 web page for a site approach is similar to Gmail and many full AJAX sites. This approach looks quite elegant. Using JSON (and JSON templates) we were able to separated fully presentation logic and business logic and componentization seemed to occur naturally.&#xA;But I remember how often I complained on how bad Javascript was to code.</description>
    </item>
    <item>
      <title>New Mac Mini</title>
      <link>https://chasethedevil.github.io/post/new-mac-mini/</link>
      <pubDate>Tue, 07 Mar 2006 20:51:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/new-mac-mini/</guid>
      <description>Here is my new Mac Mini Core Solo. I am quite happy with it since it is very quiet. It makes a good jukebox/movie/server machine. Apple was very quick in shipping it (2 days)&#xA;However I was a bit disappointed by iPhoto 6, it is not as nice as Picasa to sort out pictures (no IPTC support). I did not try Java on it yet. I just found out my little Benham circle applet was not working properly on it.</description>
    </item>
    <item>
      <title>Features That Ruby Lacks and Java Has</title>
      <link>https://chasethedevil.github.io/post/features-that-ruby-lacks-and-java-has/</link>
      <pubDate>Fri, 10 Feb 2006 15:57:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/features-that-ruby-lacks-and-java-has/</guid>
      <description>Bertrand Meyer describes in his book &amp;quot; Object Oriented Software Construction (2nd Ed)&amp;quot; qualities that a good object oriented language should have. Java has almost all the features. Ruby is much farther off, which does not mean it is not a good language, I think it&#39;s very good to write some types of programs quickly (should I call them scripts?), syntax is quite nice, but it does lack the following useful features: Assertions:The language should make it possible to equip a class and its features with assertions (preconditions, postconditions and invariants), relying on tools to produce documentation out of these assertions and, optionally, monitor them at run time.</description>
    </item>
    <item>
      <title>What Is &#39;Modern&#39; Java Compilation?</title>
      <link>https://chasethedevil.github.io/post/what-is-modern-java-compilation/</link>
      <pubDate>Tue, 07 Feb 2006 11:12:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/what-is-modern-java-compilation/</guid>
      <description>Occasionally in Ant you can see messages like this:&#xA;&amp;quot;[javac] Using modern compiler&amp;quot; What does this mean? In Ant you have the property &amp;quot; build.compiler&amp;quot; to specify if you want to use a classic or modern compiler. Now what do they mean by modern or classic. Well, they call classic compiler the compilers of JDK 1.1 and 1.2 and they call modern compiler the ones of JDK 1.3+. They made that distinction because a classic compiler does not support the same options as modern compilers: the semantics of javac tool changed in JDK 1.</description>
    </item>
    <item>
      <title>RMI Nightmares - Non Interoperability</title>
      <link>https://chasethedevil.github.io/post/rmi-nightmares---non-interoperability/</link>
      <pubDate>Tue, 31 Jan 2006 18:39:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/rmi-nightmares---non-interoperability/</guid>
      <description>These days we tried to make Websphere and Jonas interoperate. Some EJBs are deployed in Jonas and we just try to call them from Websphere. The most natural way is to use RMI (with JRMP) for that. Jonas uses JDK1.4.2 (conforms to J2EE 1.4) and Websphere IBM JVM 1.3.1 (conforms to J2EE 1.3). Because of RMI serialization, an EJB from Jonas will not work on Websphere, because this EJB has references to J2EE 1.</description>
    </item>
    <item>
      <title>What Is Clustering About – An answer to Spring is not designed for scalability</title>
      <link>https://chasethedevil.github.io/post/what-is-clustering-about--an-answer-to-spring-is-not-designed-for-scalability/</link>
      <pubDate>Mon, 16 Jan 2006 16:57:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/what-is-clustering-about--an-answer-to-spring-is-not-designed-for-scalability/</guid>
      <description>I wanted to reply to Diego Parilla post about scalability, but my reply ended up being too long not to post it over here. I don&amp;rsquo;t know if I am the only one here but I don&amp;rsquo;t fully understand his post and arguments.&#xA;Clustering the web server and clustering the model are just two parts of clustering, not exclusive.&#xA;In a LAMP application, clustering the model is traditionally done by clustering the DB (MySQL) which is a no brainer.</description>
    </item>
    <item>
      <title>My Dream Job</title>
      <link>https://chasethedevil.github.io/post/my-dream-job/</link>
      <pubDate>Thu, 12 Jan 2006 11:42:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/my-dream-job/</guid>
      <description>In my dream job, I would have freedom to play with and build software based on new ideas I have.&#xA;In my dream job, I would work with creative people, luminaries.&#xA;In my dream job, I would have a good enough salary.&#xA;In my dream job, I would not have to worry about the company stability.&#xA;In my dream job, I would have freedom in my work schedule.&#xA;Get paid for doing what you really want (i.</description>
    </item>
    <item>
      <title>Ogg better than MPC and MP3 - AAC crap</title>
      <link>https://chasethedevil.github.io/post/ogg-better-than-mpc-and-mp3---aac-crap/</link>
      <pubDate>Wed, 04 Jan 2006 11:47:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/ogg-better-than-mpc-and-mp3---aac-crap/</guid>
      <description>The latest well done (e.g. blind) listening test comparing Ogg, MPC, MP3, AAC at about 180kbps shows that Ogg is superior to all other compressing formats. It&amp;rsquo;s not that easy to find relevant tests. Many people claim to be able to notice huge differences between CD and MP3 and yet, but confronted to a blind listening test, they are very surprised how difficult it actually is. Hydrogenaudio has a good community of audiophiles.</description>
    </item>
    <item>
      <title>What&#39;s Your Favorite Design Pattern</title>
      <link>https://chasethedevil.github.io/post/whats-your-favorite-design-pattern/</link>
      <pubDate>Tue, 27 Dec 2005 12:18:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/whats-your-favorite-design-pattern/</guid>
      <description>Once in a job interview, someone asked me&#xA;What&amp;rsquo;s your favorite design pattern?&#xA;I was first surprised at the question. Usually a design pattern is about solving a problem not about a personal preference. I wondered if it was a trick question of some sorts. I was hesitating with my answer and asked more about the meaning of the question. I just had to really give the pattern I liked the most!</description>
    </item>
    <item>
      <title>Professional Portal Development Book Review</title>
      <link>https://chasethedevil.github.io/post/professional-portal-development-book-review/</link>
      <pubDate>Tue, 27 Dec 2005 12:08:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/professional-portal-development-book-review/</guid>
      <description>I just finished reading Professional Portal Development With Open Source Tools (Wiley).&#xA;The Good:&#xA;I enjoyed Chapter 1, it gives a good presentation of Portlets for someone who does not know much about it. It is a chapter one can use as a reference to verify some specific details of how Portlets are working. It is a bit similar to JSR 168 specifications, but I found it more detailed and well written.</description>
    </item>
    <item>
      <title>IBM Websphere Portal Strategy</title>
      <link>https://chasethedevil.github.io/post/ibm-websphere-portal-strategy/</link>
      <pubDate>Wed, 07 Dec 2005 17:48:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/ibm-websphere-portal-strategy/</guid>
      <description>I digged a bit deeper in a current project where they use IBM Websphere Portal Server (WPS) with IBM Web Content Management (WCM). I found out that both products collide and disintegrate.&#xA;WCM is like a regular content management system, quite flexible and performant on its own. It has a nice way to separate layout concern from content concern. It has a flexible cache. It has a user repository to set different permissions.</description>
    </item>
    <item>
      <title>Portlets in an AJAX World</title>
      <link>https://chasethedevil.github.io/post/portlets-in-an-ajax-world/</link>
      <pubDate>Tue, 29 Nov 2005 16:29:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/portlets-in-an-ajax-world/</guid>
      <description>Recently, I have had my first encounter with Portlets although Portlets are not very new. IBM had their own Portlet API before the JSR 168 was final in 2003. Unfortunately both approaches are quite different and IBM does not recommend the use of their own API.&#xA;Portlets were a needed concept for a long time. I worked in 2000 on a java portal system and it would have been handy at that time.</description>
    </item>
    <item>
      <title>Good Software Books</title>
      <link>https://chasethedevil.github.io/post/good-software-books/</link>
      <pubDate>Thu, 17 Nov 2005 21:24:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/good-software-books/</guid>
      <description>A friend asked me for a list, here is it. I found those books the most interesting ones among those I have read about software in the past year or two:&#xA;Artificial Intelligence through Prolog, by Neil C. Rowe (Prentice-Hall): if you don&#39;t remember much about Prolog, it&#39;s a good book. It details how Prolog interpreters work. File Systems Forensic Analysis, by Brian Carrier (Addison Wesley): everything you need to know about disks and file systems, every trick to recover lost data.</description>
    </item>
    <item>
      <title>Apple Rumors and X86 first move</title>
      <link>https://chasethedevil.github.io/post/apple-rumors-and-x86-first-move/</link>
      <pubDate>Wed, 16 Nov 2005 17:59:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/apple-rumors-and-x86-first-move/</guid>
      <description>I find the mac mini a particularly compelling computer. It is small, noise friendly, relatively cheap. If you want to have a cheap home server (based on Linux or MacOS X), this is quite a good choice as you probably don&amp;rsquo;t want to hear all the fans of bigger computers the whole day. It&amp;rsquo;s also a very good candidate for a media box: you can connect a huge hard drive for mp3s, and watch your DVDs, photos on a nice LCD (and MacOS helps here).</description>
    </item>
    <item>
      <title>7 Years Later: Still EJBs</title>
      <link>https://chasethedevil.github.io/post/7-years-later-still-ejbs/</link>
      <pubDate>Mon, 07 Nov 2005 16:29:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/7-years-later-still-ejbs/</guid>
      <description>In 1998, a student of my school had a project with Sun about EJBs. This was the beginning of EJBs, they were not public, and there was no J2EE. At that time he found it utterly complicated, and had difficulties to understand why they made it so complicated.&#xA;In 2000, I worked for a company who had built in-house most components of a today J2EE application server. For example, they had their own unified messaging system, on the JSP side, they were already using custom tags, etc.</description>
    </item>
    <item>
      <title>Job Hunting: Interview Madness</title>
      <link>https://chasethedevil.github.io/post/job-hunting-interview-madness/</link>
      <pubDate>Fri, 04 Nov 2005 10:40:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/job-hunting-interview-madness/</guid>
      <description>I have been doing interviews those past weeks. Today I had to present my resume for the N time where N is big. It is very boring. In France, it is common to have 5 interviews for a small company (that says a bit about how people trust each other and makes me envy Germany where the practice is to select very strictly on the resume and be more relax about interviews).</description>
    </item>
    <item>
      <title>Does Eclipse Rot The Brain?</title>
      <link>https://chasethedevil.github.io/post/does-eclipse-rot-the-brain/</link>
      <pubDate>Thu, 27 Oct 2005 17:42:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/does-eclipse-rot-the-brain/</guid>
      <description>Slashdot presented a really insightful article on Visual Studio by Charles Petzold called Does Visual Studio Rot the Mind. Interestingly it seems that Eclipse does things better than the future Visual Studio.&#xA;Autocomplete in Eclipse is really good and does not suffer of the bottom-up problem M. Petzold mentioned, nor from the forced CTRL-Z. There is no Form designer, and in Java it has been the practice to lay out forms programmatically.</description>
    </item>
    <item>
      <title>Orkut Statistics and Blog Evolution</title>
      <link>https://chasethedevil.github.io/post/orkut-statistics-and-blog-evolution/</link>
      <pubDate>Tue, 18 Oct 2005 13:03:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/orkut-statistics-and-blog-evolution/</guid>
      <description>I was just having a look at orkut again. As in my last look in the past year, there is not much new or interesting. The technical forums are mostly uninteresting and it almost looks like nothing is going on. Take a look at the orkut java forums, in 1 year, very few messages are good.&#xA;Compare that to javablogs.com blogs aggregation, every week there are many interesting posts. The blog model is good because it is targeted at people who want to write.</description>
    </item>
    <item>
      <title>Spring Books Roundup Updated</title>
      <link>https://chasethedevil.github.io/post/spring-books-roundup-updated/</link>
      <pubDate>Mon, 10 Oct 2005 16:27:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/spring-books-roundup-updated/</guid>
      <description>I am completing my Spring Books Roundup with 2 new books:&#xA;Pro Spring, by Apress: a lengthy book, with some unnecessary information, but good overall. I did not like the Part 1, there is not much content in it. Fortunately, Part 2 is much better, dependency injection is very well described, almost on par, with the Fowler article of reference. Other Spring areas are well covered, in a similar manner as in Wrox book, except Java Server Faces, absent from the book, and nothing on Swing as well Spring Reference Documentation, from the springframework.</description>
    </item>
    <item>
      <title>Spring Books Roundup</title>
      <link>https://chasethedevil.github.io/post/spring-books-roundup/</link>
      <pubDate>Mon, 10 Oct 2005 11:15:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/spring-books-roundup/</guid>
      <description>Spring is hip these days, so I decided to learn a bit more about it. I had used Avalon a while ago, I was attracted by its design by component and the way it seemed to lay out a proper infrastructure to build a server application. In the end, I was a bit disappointed, it required a bit too much glue code for my taste and did not provide that much in exchange.</description>
    </item>
    <item>
      <title>Interesting Plug-In Framework - DPML Transit</title>
      <link>https://chasethedevil.github.io/post/interesting-plug-in-framework---dpml-transit/</link>
      <pubDate>Thu, 29 Sep 2005 15:20:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/interesting-plug-in-framework---dpml-transit/</guid>
      <description>Today, I just found out about DPML Transit, it is a small framework that helps you build plug-ins based software. It seems to work a bit with DPML Magic, their build system based upon Ant. Both are quite interesting, since in big projects, you often end up with a packaging per component (which DPML Magic seems to make very simple) and a versioning of those components. DPML Transit allows then for an efficient way to look up a particular version of one component.</description>
    </item>
    <item>
      <title>Java Puzzlers - Can you figure this out?</title>
      <link>https://chasethedevil.github.io/post/java-puzzlers---can-you-figure-this-out/</link>
      <pubDate>Wed, 28 Sep 2005 16:04:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-puzzlers---can-you-figure-this-out/</guid>
      <description>The book Java Puzzlers is quite good. I don&#39;t think anyone can get every puzzle right. This shows again how you can very easily make someone fail interviews if you ask too silly questions. I suppose that if people were asking those questions they would not expect the right answers, but study the candidate reactions.&#xA;Here is a sample:&#xA;public class DosEquis {&#xA;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {</description>
    </item>
    <item>
      <title>Is Prolog Better Suited Than SQL?</title>
      <link>https://chasethedevil.github.io/post/is-prolog-better-suited-than-sql/</link>
      <pubDate>Mon, 26 Sep 2005 15:36:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/is-prolog-better-suited-than-sql/</guid>
      <description>I am currently reading a Prolog book Artificial Intelligence Through Prolog, I have been doing a bit of Prolog when I was very young and wanted to refresh my memory a bit. It is a very interesting read, especially when I take the viewpoint of our current application where no ACID compliance is required.&#xA;It seems to me that all the logic we coded to parametrize SQL queries and construct them dynamically could have been avoided if we had chosen Prolog as Prolog expressions would have been very natural to use in our project.</description>
    </item>
    <item>
      <title>When California Was An Island</title>
      <link>https://chasethedevil.github.io/post/when-california-was-an-island/</link>
      <pubDate>Wed, 21 Sep 2005 19:01:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/when-california-was-an-island/</guid>
      <description> This is from an old (1680s) big (2 tons) Coronelli globe, currently displayed in Grand Palais, Paris. Can you spot San Francisco there? </description>
    </item>
    <item>
      <title>Currying - A Very Interesting Use Of Generics</title>
      <link>https://chasethedevil.github.io/post/currying---a-very-interesting-use-of-generics/</link>
      <pubDate>Fri, 16 Sep 2005 14:41:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/currying---a-very-interesting-use-of-generics/</guid>
      <description>In bamboo-dht, a distributed java hashtable project, the main developer, Sean C. Rhea, advocates the use of Curries and Thunks (of LISP and ML). He wrote an interesting and valuable document, Async Tutorial, presenting a use of it. I will present the concept here shortly:&#xA;public interface Thunk1&amp;lt;T&amp;gt; { void run (T t ) ; }&#xA;Thunk1&amp;lt;Integer&amp;gt; intThunk = new Thunk1&amp;lt;Integer&amp;gt;() {&#xA;void run (Integer i ) { System.out.println( i ) ; }</description>
    </item>
    <item>
      <title>On J2EE Portability Accross Application Servers</title>
      <link>https://chasethedevil.github.io/post/on-j2ee-portability-accross-application-servers/</link>
      <pubDate>Tue, 13 Sep 2005 16:50:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/on-j2ee-portability-accross-application-servers/</guid>
      <description>Brian Alexander Lee wrote:&#xA;&amp;ldquo;dismal interview where I asked about the candidate&amp;rsquo;s experience with porting a J2EE application from WebLogic to WebSphere (which was listed on his resume). The candidate said that it was very easy and he just deployed his application with no problems or changes necessary, he had no changes made for the application to run properly. This was one of many bad signs for the candidate.&amp;rdquo;&#xA;I disagree.</description>
    </item>
    <item>
      <title>JavaBlogs Weekly Top 10 and Java HTML parsing</title>
      <link>https://chasethedevil.github.io/post/javablogs-weekly-top-10-and-java-html-parsing/</link>
      <pubDate>Mon, 12 Sep 2005 16:00:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/javablogs-weekly-top-10-and-java-html-parsing/</guid>
      <description>I took some time to continue my little JavaBlogs analysis, I now have a page summarizing the top 10 most read blog entries in the last week. The page is generated every 24h (this is why there is no &amp;lsquo;best progression&amp;rsquo; as of today).&#xA;I also fixed some bugs related to HTML in RSS2. I understand a bit better why a RSS 1.0 co-author decided to remove the possibility of HTML descriptions for RSS 3.</description>
    </item>
    <item>
      <title>Spam In Blog Comments</title>
      <link>https://chasethedevil.github.io/post/spam-in-blog-comments/</link>
      <pubDate>Sat, 10 Sep 2005 01:34:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/spam-in-blog-comments/</guid>
      <description>I was a victim like many other of spams in comments. It&amp;rsquo;s stupid for people to do that on Blogger.com since the links on comments can not be referenced by search engines (they have some special &amp;lsquo;relative&amp;rsquo;attribute for that) and improve pagerank.&#xA;Fortunately Blogger.com provides a word verification step if you want to avoid random spam. However I am a bit disappointed that they force Blogger.com users to do that word verification as well.</description>
    </item>
    <item>
      <title>JavaBlogs Daily Analysis</title>
      <link>https://chasethedevil.github.io/post/javablogs-daily-analysis/</link>
      <pubDate>Fri, 09 Sep 2005 17:10:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/javablogs-daily-analysis/</guid>
      <description>I was wondering what blog entries were the most interesting on Javablogs. I decided to write a small application to do that. It was not much more complex to put it online for others to look at as well. It is currently running on http://gopix.net:8081/javabuzz&#xA;It also presents Javablogs a bit differently (I like it better that way).&#xA;Please note that it is just the result of a 1 (full) day of work currently.</description>
    </item>
    <item>
      <title>Commons-Beanutils Is Slow</title>
      <link>https://chasethedevil.github.io/post/commons-beanutils-is-slow/</link>
      <pubDate>Wed, 07 Sep 2005 17:28:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/commons-beanutils-is-slow/</guid>
      <description>The BeanUtil.popupate(bean,map) can be very handy, but if you care about performance, it is quite slow. I ran a micro benchmark on my machine (centrino 1.8ghz, JDK1.5) and found out that BeanUtils is up to 40x slower than a hand coded solution (where I assign each bean field manually). I was a bit surprised to find such a difference. I suppose there is a big penalty for using reflection and another big one for the BeanUtils abstraction (automatic casting, etc.</description>
    </item>
    <item>
      <title>Generate your RSS feed in Java</title>
      <link>https://chasethedevil.github.io/post/generate-your-rss-feed-in-java/</link>
      <pubDate>Mon, 05 Sep 2005 14:03:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/generate-your-rss-feed-in-java/</guid>
      <description>There are some open source projects that can help you in generating or reading RSS feeds in Java. I found only two libraries a bit mature, other code is often embedded in other open source products (jroller for example):&#xA;Informa: Does various RSS formats and Atom 0.3. Documentation is better than its alternative, but less focused (has some hibernate helper thingy, some lucene helper, etc.).&#xA;Sandler: There is no working homepage while I am writing this.</description>
    </item>
    <item>
      <title>The Evil Port 80</title>
      <link>https://chasethedevil.github.io/post/the-evil-port-80/</link>
      <pubDate>Thu, 01 Sep 2005 13:46:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/the-evil-port-80/</guid>
      <description>I was writing an Atom feed generator for my current project. I chosed to support Atom 1.0 since it looks like it has the capabilities to establish as the next standard. Unfortunately I quickly saw that it was quite hard to test it in the real world (out of the good feedvalidator), as almost nobody seems to accept Atom 1.0 feeds yet, even if it is rapidely changing (there is support for it in Firefox CVS version).</description>
    </item>
    <item>
      <title>I Need Another DB Framework!</title>
      <link>https://chasethedevil.github.io/post/i-need-another-db-framework/</link>
      <pubDate>Tue, 23 Aug 2005 19:37:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/i-need-another-db-framework/</guid>
      <description>I am currently facing a problem that neither Hibernate nor iBatis solves nicely. I also looked at other ORM or just DB framework, without success.&#xA;What I would need is a framework that generates PreparedStatements with a query by Criteria like API. I have many queries that are similar but varying according to different input parameters. iBatis can handle this, but for complex queries and scenarios, the XML becomes completely unreadable, and you therefore loose any advantage that iBatis was bringing with the externalization of SQL statements in XML.</description>
    </item>
    <item>
      <title>del.icio.us toolbar customized</title>
      <link>https://chasethedevil.github.io/post/del.icio.us-toolbar-customized/</link>
      <pubDate>Sun, 21 Aug 2005 05:20:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/del.icio.us-toolbar-customized/</guid>
      <description>When I bookmark articles with delicious, I like to keep the content on my hard drive, because pages sometimes change, or are removed, or I want to do local searches. I believe this is one reason some people like furl (furl keeps a copy on their server that only yourself can read, but does not allow search).&#xA;A combination of slogger and delicious could solve partially the problem. But it is not integrated, I can&#39;t get my local version from delicious, so I loose the tagging, listing and all other plus from delicious.</description>
    </item>
    <item>
      <title>Inside the Java Virtual Machine</title>
      <link>https://chasethedevil.github.io/post/inside-the-java-virtual-machine/</link>
      <pubDate>Thu, 18 Aug 2005 11:03:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/inside-the-java-virtual-machine/</guid>
      <description>I am reading an old book, Inside the Java Virtual Machine. Some old books don&#39;t age, and this is one of them. The chapter on the Java Virtual Machine is just excellent and should be read by every Java developer. It explains each step a JVM does when you run a Java program, very clearly.&#xA;You could get plenty of stupid interview questions from it like: How is the Java stack used?</description>
    </item>
    <item>
      <title>Firefox Shortcut URL as Command Line for the Web</title>
      <link>https://chasethedevil.github.io/post/firefox-shortcut-url-as-command-line-for-the-web/</link>
      <pubDate>Tue, 16 Aug 2005 13:42:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/firefox-shortcut-url-as-command-line-for-the-web/</guid>
      <description>I have been doing some work on Firefox extensions. Mozilla/Firefox is a really interesting world, it is extremely flexible, you can make it transform the web the way you want.&#xA;Recently, someone started YubNub, the &#34;command line for the web&#34;, a very simple idea, but useful. This is a bit similar to the Firefox Search Bar, except more powerful, and quicker to use. Mozilla developers actually had that idea a long time ago (around 2000), it is called shortcut url.</description>
    </item>
    <item>
      <title>Hibernate Criteria API vs HQL Overhead</title>
      <link>https://chasethedevil.github.io/post/hibernate-criteria-api-vs-hql-overhead/</link>
      <pubDate>Wed, 10 Aug 2005 14:16:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/hibernate-criteria-api-vs-hql-overhead/</guid>
      <description>I was wondering what was the framework weight in the performance of my application, and I wanted to check at several frameworks performance. I used JMeter to benchmark a stripped application (database access through tomcat) under various loads. My very modest test shows no significant difference between Hibernate Criteria API and HQL access for queries. Criteria might be a few milliseconds slower, but my query time will take 10x more time, even for a relatively simple query (my query is has 3 inner joins, is grouped, with a count and takes only 4ms when performed once in mysql under no load).</description>
    </item>
    <item>
      <title>How to become a JavaRSS member on blogger.com</title>
      <link>https://chasethedevil.github.io/post/how-to-become-a-javarss-member-on-blogger.com/</link>
      <pubDate>Fri, 05 Aug 2005 13:32:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/how-to-become-a-javarss-member-on-blogger.com/</guid>
      <description>The trick is to create a post with the javarss image and to use the link generated by blogger.com to display the image. Then you can follow the rules from http://www.javarss.com/pages/?page=suggest</description>
    </item>
    <item>
      <title>Java is more productive than Ruby/Rails</title>
      <link>https://chasethedevil.github.io/post/java-is-more-productive-than-rubyrails/</link>
      <pubDate>Tue, 26 Jul 2005 13:26:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-is-more-productive-than-rubyrails/</guid>
      <description>I have been doing some Ruby On Rails, for 2 small projects. While I think it is good, I think it is overhyped as well. It is well designed, has good ideas (easy configuration), and focus on the right problem, architecture. But my conclusion is that I am not more productive with it than with Java.&#xA;I think most of the development time is not spent coding, but thinking. It is a very obvious statement, and yet too often ignored.</description>
    </item>
    <item>
      <title>féminisme et statistiques</title>
      <link>https://chasethedevil.github.io/post/f%C3%A9minisme-et-statistiques/</link>
      <pubDate>Thu, 21 Jul 2005 12:16:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/f%C3%A9minisme-et-statistiques/</guid>
      <description>Sur ce lien, un article un peu trop long, mais avec pas mal de points int&amp;eacute;ressants:&#xA;6 femmes par mois d&amp;eacute;c&amp;egrave;dent, en France, par violence conjugale, soit plus que le nombre de victimes du metro anglais sur un an. Pour toutes les statistiques sur les chances de mourir suivant les causes, aux Etats-Unis, cliquer ici (on voit notamment que le plus grand risque est l&#39;accident de voiture, ou la chute, ou le suicide par arme &amp;agrave; feu, devant les attaques par arme &amp;agrave; feu).</description>
    </item>
    <item>
      <title>Ruby, Python, JavaScript, Lua, Java, C&#43;&#43; benchmark</title>
      <link>https://chasethedevil.github.io/post/ruby-python-javascript-lua-java-c-benchmark/</link>
      <pubDate>Wed, 20 Jul 2005 11:49:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/ruby-python-javascript-lua-java-c-benchmark/</guid>
      <description>Simple benchmark but with interesting comments here:&#xA;Some of the conclusions are:&#xA;Java interpreter is very good Java JIT is as fast as C++ Ruby, JavaScript, Python are of similar order of magnitude speed, Ruby the slowest. It would have been interesting to benchmark interpreted languages for the JVM.&#xA;Now for most projects, architecture, not language is key in achieving good performance.</description>
    </item>
    <item>
      <title>Fowler On Your Future: editing the abstract representation of a program</title>
      <link>https://chasethedevil.github.io/post/fowler-on-your-future-editing-the-abstract-representation-of-a-program/</link>
      <pubDate>Tue, 19 Jul 2005 12:40:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/fowler-on-your-future-editing-the-abstract-representation-of-a-program/</guid>
      <description>This Fowler article on &#34;language workbench&#34; reminds me of Gosling Jackpot ideas: it is about a different interaction with your program where the source code does not matter so much, but its structure. It must be fascinating to work on this kind of project.&#xA;Maybe MDA sounds similar to you, after all, actual language workbench systems are generating source code. But the fundamental difference is that a workbench generated program is much richer and can capture everything you want to do (MDA is too based on UML to be that powerful), also, the source could disappear and be replaced by byte codes only.</description>
    </item>
    <item>
      <title>Jython instead of Ant: sample code</title>
      <link>https://chasethedevil.github.io/post/jython-instead-of-ant-sample-code/</link>
      <pubDate>Sat, 16 Jul 2005 01:50:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/jython-instead-of-ant-sample-code/</guid>
      <description>Here is an example of how to use jython to deploy a web application under tomcat. The application is supposed here to be WAR packaged in a &#39;web&#39; directory. Libraries used for the web-app are already in web/WEB-INF/lib, classes are compiled automatically by Eclipse under web/WEB-INF/classes, and resources are copied automatically by Eclipse. If necessary, it is very easy to script those actions in the python script, with very little code.</description>
    </item>
    <item>
      <title>Java development without Ant</title>
      <link>https://chasethedevil.github.io/post/java-development-without-ant/</link>
      <pubDate>Tue, 12 Jul 2005 16:16:00 +0000</pubDate>
      <guid>https://chasethedevil.github.io/post/java-development-without-ant/</guid>
      <description>When Ant came out, I welcomed it. It was better than Makefiles for Java, it solved the path and classpath format difference between Windows and Linux, did not rely on shell programs. It did provide a platform independent way for building Java software. At that time, there was another alternative, JMK which had a lisp like syntax, and solved the same problems as Ant. But Ant was backed by apache, and this were the times of XML everywhere.</description>
    </item>
  </channel>
</rss>
