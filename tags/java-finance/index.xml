<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java finance on Chase the Devil</title>
    <link>https://chasethedevil.github.io/tags/java-finance/</link>
    <description>Recent content in java finance on Chase the Devil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2006-2018 Fabien Le Floc&#39;h. This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <lastBuildDate>Mon, 17 Aug 2009 12:04:00 +0000</lastBuildDate><atom:link href="https://chasethedevil.github.io/tags/java-finance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implicit Finite Differences Method For Pricing Barrier Option</title>
      <link>https://chasethedevil.github.io/post/implicit-finite-differences-method-for-pricing-barrier-option/</link>
      <pubDate>Mon, 17 Aug 2009 12:04:00 +0000</pubDate>
      
      <guid>https://chasethedevil.github.io/post/implicit-finite-differences-method-for-pricing-barrier-option/</guid>
      <description>While trying to price a simple knock down and out barrier option, I encountered several difficulties I did not expect with the implicit finite differences method. The explicit method has less issues with barrier options pricing. I will show here what the tricky parts are and why explicit seems simpler in this case.
The full article is here (pdf) or here (html) (the later is not very well formatted).</description>
    </item>
    
    <item>
      <title>On Quasi Random Numbers - MersenneTwister vs Sobol precision in Asian Option Pricing</title>
      <link>https://chasethedevil.github.io/post/on-quasi-random-numbers-mersennetwister-vs-sobol-precision-in-asian-option-pricing/</link>
      <pubDate>Tue, 05 May 2009 15:02:00 +0000</pubDate>
      
      <guid>https://chasethedevil.github.io/post/on-quasi-random-numbers-mersennetwister-vs-sobol-precision-in-asian-option-pricing/</guid>
      <description>While starting a side project that does Monte Carlo pricing in Java (http://code.google.com/p/javamc/ - nothing yet there I am waiting for Mercurial repository support), I wondered what was the importance of quasi random numbers versus more regular pseudo random numbers in Monte Carlo simulations.
This brought me to read more carefully several books about Monte Carlo and Finance (Haug Option Pricing, Sobol Primer on Monte Carlo, and Glasserman Monte Carlo Methods in Finance Engineering).</description>
    </item>
    
  </channel>
</rss>
